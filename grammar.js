/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,19],$V2=[1,18],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[2,5,22,31,33,44,46,47,48,50,51,55,57,58,59,60,61,62],$Vf=[1,39],$Vg=[1,43],$Vh=[1,44],$Vi=[1,45],$Vj=[1,52],$Vk=[22,26],$Vl=[1,63],$Vm=[1,61],$Vn=[1,60],$Vo=[1,62],$Vp=[1,64],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[8,36],$Vw=[1,79],$Vx=[32,36],$Vy=[1,108],$Vz=[1,109],$VA=[1,94],$VB=[1,95],$VC=[1,96],$VD=[1,97],$VE=[1,98],$VF=[1,99],$VG=[1,100],$VH=[1,101],$VI=[1,102],$VJ=[1,103],$VK=[1,104],$VL=[1,105],$VM=[1,106],$VN=[1,107],$VO=[8,27,31,32,36,40,41,42,43,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$VP=[1,118],$VQ=[2,5,22,31,33,44,45,46,47,48,50,51,55,57,58,59,60,61,62],$VR=[8,27,31,32,36,40,41,42,43,63,64,69,70,71,72,73,74,75,76],$VS=[8,27,31,32,36,40,41,42,43,63,64,65,66,68,69,70,71,72,73,74,75,76],$VT=[8,27,31,32,36,40,41,42,43,69,70,71,72,73,74,75,76],$VU=[1,178],$VV=[1,177],$VW=[31,55,57],$VX=[31,32],$VY=[2,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"DECLARACION_VARIABLE":7,";":8,"DECLARACION_VECTORES":9,"DECLARACION_METODO":10,"LLAMADA_METODOS":11,"ASIGNACION_VARIABLE":12,"ASIGNACION_VECTORES":13,"FUNCION_IF":14,"FUNCION_PRINT":15,"FUNCION_WHILE":16,"FUNCION_FOR":17,"FUNCION_DO_WHILE":18,"FUNCION_SWITCH":19,"PTCOMA":20,"TIPO":21,"id":22,"=":23,"EXPRESION":24,"EXPRESION_IF":25,"[":26,"]":27,"RNEW":28,"{":29,"LISTA_EXPRESIONES":30,"}":31,",":32,"RVOID":33,"(":34,"PARAMETROS":35,")":36,"INSTRUCCIONES_FUNCION":37,"DECLARACION_VACIA_METODO":38,"PARAMETROS_LLAMADA":39,"++":40,"--":41,"?":42,":":43,"RIF":44,"RELSE":45,"RPRINT":46,"RWHILE":47,"RFOR":48,"DEC_O_ASIG":49,"RDO":50,"RSWITCH":51,"CASES_SWITCH":52,"DEFAULT":53,"CASE_SWITCH":54,"RCASE":55,"INSTRUCCIONES_SWITCH":56,"RDEFAULT":57,"RINT":58,"RBOOLEAN":59,"RSTRING":60,"RDOUBLE":61,"RCHAR":62,"+":63,"-":64,"*":65,"/":66,"^":67,"%":68,"==":69,"!=":70,"<":71,">":72,"<=":73,">=":74,"||":75,"&&":76,"!":77,"ENTERO":78,"DECIMAL":79,"CARACTER":80,"CADENA":81,"RTRUE":82,"RFALSE":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",20:"PTCOMA",22:"id",23:"=",26:"[",27:"]",28:"RNEW",29:"{",31:"}",32:",",33:"RVOID",34:"(",36:")",40:"++",41:"--",42:"?",43:":",44:"RIF",45:"RELSE",46:"RPRINT",47:"RWHILE",48:"RFOR",50:"RDO",51:"RSWITCH",55:"RCASE",57:"RDEFAULT",58:"RINT",59:"RBOOLEAN",60:"RSTRING",61:"RDOUBLE",62:"RCHAR",63:"+",64:"-",65:"*",66:"/",67:"^",68:"%",69:"==",70:"!=",71:"<",72:">",73:"<=",74:">=",75:"||",76:"&&",77:"!",78:"ENTERO",79:"DECIMAL",80:"CARACTER",81:"CADENA",82:"RTRUE",83:"RFALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[7,4],[7,2],[7,4],[9,10],[9,8],[30,3],[30,1],[10,6],[10,5],[35,3],[35,1],[38,2],[11,4],[11,3],[39,3],[39,1],[12,3],[12,3],[12,2],[12,2],[13,7],[25,5],[37,3],[37,2],[14,5],[14,7],[14,7],[15,4],[16,5],[17,9],[18,6],[49,1],[49,1],[19,7],[19,8],[19,7],[52,2],[52,1],[54,4],[53,3],[56,1],[56,0],[21,1],[21,1],[21,1],[21,1],[21,1],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,2],[24,2],[24,4],[24,4],[24,4],[24,4],[24,1],[24,4],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                            console.log("Parse de Jison entrada: OK ");
                            lista_temporal =[]; let raiz = $$[$0-1][0];  lista_temporal.push(raiz)
                            lista_temporal_3 = $$[$0-1][1]; 
                            nodo_graf = new NODO_GRAFICAS("PROGRAMA",_$[$0-1].first_line, _$[$0-1].first_column, 'red');     
                            for(let i = 0; i< lista_temporal_3.length;i++){let a = lista_temporal_3[i]; nodo_graf.agregar_hijo(a);}
                            lista_temporal.push(nodo_graf)
                            this.$ = lista_temporal;
                            return lista_temporal;
                        
break;
case 2:
lista_temporal = $$[$0-1];  lista_temporal_2= lista_temporal[0]; lista_temporal_2.push($$[$0][0]);
                                                    lista_temporal_3 =lista_temporal[1];  nodo_graf = new NODO_GRAFICAS( "INSTRUCCION", _$[$0-1].first_line, _$[$0-1].first_column, "yellowgreen" ); lista_temporal_3.push(nodo_graf);nodo_graf.agregar_hijo($$[$0][1])
                                                    lista_temporal = []; lista_temporal.push(lista_temporal_2); lista_temporal.push(lista_temporal_3); this.$ = lista_temporal;     
break;
case 3:
   let lstsent = [];        lstsent.push($$[$0][0]);   
                                nodo_graf = new NODO_GRAFICAS( "INSTRUCCION", _$[$0].first_line, _$[$0].first_column, "yellowgreen" );
                                nodo_graf.agregar_hijo($$[$0][1]);
                                lista_temporal_3 = []; lista_temporal_3.push(nodo_graf);
                                lista_temporal = []; lista_temporal.push(lstsent); lista_temporal.push(lista_temporal_3);  this.$ = lista_temporal;      
break;
case 4:
 lista_temporal2= $$[$0-1][0];lista_temporal=[]; lista_temporal.push(lista_temporal2); nodo_graf = $$[$0-1][1]; lista_temporal.push(nodo_graf); this.$ = lista_temporal; 
break;
case 5: case 8: case 11: case 14:
 lista_temporal=[]; lista_temporal.push($$[$0-1][0]); nodo_graf = $$[$0-1][1]; lista_temporal.push(nodo_graf); this.$ = lista_temporal; 
break;
case 6: case 7: case 9: case 10: case 12: case 13: case 15:
 lista_temporal=[]; lista_temporal.push($$[$0][0]); nodo_graf = $$[$0][1]; lista_temporal.push(nodo_graf); this.$ = lista_temporal; 
break;
case 16: case 17:
console.error('Este es un error SINTACTICO');
break;
case 18:
val = new DECLARACION_VARIABLE($$[$0-3][0], $$[$0-2], $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column);
                              nodo_graf = new NODO_GRAFICAS( "DECLARACION_VARIABLE", _$[$0-3].first_line, _$[$0-3].first_column, "skyblue" );
                              nodo_graf.agregar_hijo($$[$0-3][1]);    //TIPO
                              nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-3].first_line, _$[$0-3].first_column, "skyblue" );//ID
                              nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                              nodo_graf.agregar_hijo(nodo_prueba);
                              nodo_prueba = new NODO_GRAFICAS( "=", _$[$0-3].first_line, _$[$0-3].first_column, "black" );//=
                              nodo_graf.agregar_hijo(nodo_prueba);
                              nodo_graf.agregar_hijo($$[$0][1]);//VALOR
                              nodo_prueba = new NODO_GRAFICAS( ";", _$[$0-3].first_line, _$[$0-3].first_column, "black" );//;
                              nodo_graf.agregar_hijo(nodo_prueba);
                              lista_temporal=[];lista_temporal.push(val);lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                
break;
case 19:
lista_temporal = []; val = new DECLARACION_VARIABLE($$[$0-1][0], $$[$0], undefined, _$[$0].first_line, _$[$0].first_column); lista_temporal.push(val);
                                                nodo_graf = new NODO_GRAFICAS( "DECLARACION_VARIABLE", _$[$0-1].first_line, _$[$0-1].first_column, "skyblue" );
                                                nodo_graf.agregar_hijo($$[$0-1][1]);    //TIPO
                                                nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-1].first_line, _$[$0-1].first_column, "skyblue" );//ID
                                                nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0], _$[$0-1].first_line, _$[$0-1].first_column, "black" ))
                                                nodo_graf.agregar_hijo(nodo_prueba);
                                                nodo_prueba = new NODO_GRAFICAS( ";", _$[$0-1].first_line, _$[$0-1].first_column, "black" );//;
                                                nodo_graf.agregar_hijo(nodo_prueba);
                                                lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                
break;
case 20:
lista_temporal=[]; val = new DECLARACION_VARIABLE($$[$0-3][0], $$[$0-2], $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column);
                                                        nodo_graf = new NODO_GRAFICAS( "DECLARACION_VARIABLE", _$[$0-3].first_line, _$[$0-3].first_column, "skyblue" );
                                                        nodo_graf.agregar_hijo($$[$0-3][1]);    //TIPO
                                                        nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-3].first_line, _$[$0-3].first_column, "skyblue" );//ID
                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        nodo_prueba = new NODO_GRAFICAS( "=", _$[$0-3].first_line, _$[$0-3].first_column, "black" );//=
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        nodo_graf.agregar_hijo($$[$0][1]);//VALOR
                                                        nodo_prueba = new NODO_GRAFICAS( ";", _$[$0-3].first_line, _$[$0-3].first_column, "black" );//;
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        lista_temporal=[];lista_temporal.push(val);lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                            
break;
case 21:
val = new DECLARACION_VECTOR_TIPO1($$[$0-9][0], $$[$0-6], [],$$[$0-1][0],_$[$0-6].first_line,_$[$0-6].first_column );
                                                                                nodo_graf = new NODO_GRAFICAS( "DECLARACION VECTOR", _$[$0-9].first_line, _$[$0-9].first_column, "skyblue" );
                                                                                nodo_graf.agregar_hijo($$[$0-9][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "[", _$[$0-9].first_line, _$[$0-9].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "]", _$[$0-9].first_line, _$[$0-9].first_column, "black" ));
                                                                                nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-9].first_line, _$[$0-9].first_column, "skyblue" );
                                                                                nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-6], _$[$0-9].first_line, _$[$0-9].first_column, "black" ))//id
                                                                                nodo_graf.agregar_hijo(nodo_prueba);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "=", _$[$0-9].first_line, _$[$0-9].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "\\\"NEW\\\"", _$[$0-9].first_line, _$[$0-9].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo($$[$0-3][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "[", _$[$0-9].first_line, _$[$0-9].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo($$[$0-1][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "]", _$[$0-9].first_line, _$[$0-9].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-9].first_line, _$[$0-9].first_column, "black" ));
                                                                                lista_temporal = []; lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                
break;
case 22:
 lista_temporal_2 =$$[$0-1][0]; 
                                                                                val = new DECLARACION_VECTOR_TIPO1($$[$0-7][0], $$[$0-4], lista_temporal_2,0,_$[$0-4].first_line,_$[$0-4].first_column );
                                                                                nodo_graf = new NODO_GRAFICAS( "DECLARACION VECTOR", _$[$0-7].first_line, _$[$0-7].first_column, "skyblue" );
                                                                                nodo_graf.agregar_hijo($$[$0-7][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "[", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "]", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-7].first_line, _$[$0-7].first_column, "skyblue" );
                                                                                nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-4], _$[$0-7].first_line, _$[$0-7].first_column, "black" ))//id
                                                                                nodo_graf.agregar_hijo(nodo_prueba);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "=", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                lista_temporal_3 = $$[$0-1][1];nodo_prueba = new NODO_GRAFICAS( "LISTA EXPRESIONES", _$[$0-7].first_line, _$[$0-7].first_column, "skyblue" );
                                                                                for (let i =0; i<lista_temporal_3.length;i++){ let b =lista_temporal_3[i];nodo_prueba.agregar_hijo(b);}
                                                                                nodo_graf.agregar_hijo(nodo_prueba);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                lista_temporal = []; lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$ = lista_temporal
                                                                                
break;
case 23:
 lista_temporal = $$[$0-2]; lista_temporal_2 = lista_temporal[0]; lista_temporal_2.push($$[$0][0]);
                                                                lista_temporal_3 = lista_temporal[1]; nodo_graf=$$[$0][1]; lista_temporal_3.push(nodo_graf);
                                                                lista_temporal = []; lista_temporal.push(lista_temporal_2); lista_temporal.push(lista_temporal_3); this.$ = lista_temporal;
                                                                
break;
case 24:
   let lstexp = [];        lstexp.push($$[$0][0]);  
                                                                nodo_graf = $$[$0][1]
                                                                lista_temporal_3 = []; lista_temporal_3.push(nodo_graf);
                                                                lista_temporal = []; lista_temporal.push(lstexp); lista_temporal.push(lista_temporal_3);  this.$ = lista_temporal
                                                            
break;
case 25:
lista_temporal = [];val = new DECLARACION_METODO($$[$0-5],$$[$0-4],$$[$0-2][0],$$[$0][0]); lista_temporal.push(val);
                                                                                    nodo_graf = new NODO_GRAFICAS( "DECLARACION METODO", _$[$0-5].first_line, _$[$0-5].first_column, "black" );
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: VOID", _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-5].first_line, _$[$0-5].first_column, "black" );
                                                                                    nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    lista_temporal_3 = $$[$0-2][1];
                                                                                    nodo_prueba = new NODO_GRAFICAS( "PARAMETROS", _$[$0-5].first_line, _$[$0-5].first_column, "black" );
                                                                                    for(let i=0;i<lista_temporal_3.length;i++){nodo_prueba.agregar_hijo(lista_temporal_3[i]);}
                                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                    
break;
case 26:
lista_temporal = []; val = new DECLARACION_METODO($$[$0-4],$$[$0-3],[],$$[$0][0]); lista_temporal.push(val);
                                                                                    nodo_graf = new NODO_GRAFICAS( "DECLARACION METODO", _$[$0-4].first_line, _$[$0-4].first_column, "black" );
                                                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                    
break;
case 27:
lista_temporal = $$[$0-2]; lista_temporal_2 = lista_temporal[0]; lista_temporal_2.push($$[$0][0]);
                                                                            lista_temporal_3 = lista_temporal[1];nodo_graf = new NODO_GRAFICAS( "PARAMETRO", _$[$0-2].first_line, _$[$0-2].first_column, "black" );
                                                                            nodo_graf.agregar_hijo($$[$0][1]);
                                                                            lista_temporal_3.push(nodo_graf);
                                                                            lista_temporal = []; lista_temporal.push(lista_temporal_2);lista_temporal.push(lista_temporal_3);this.$ = lista_temporal;
                                                                            
break;
case 28:
 let lstmet = [];        lstmet.push($$[$0][0]);  
                                                                        nodo_graf = new NODO_GRAFICAS( "PARAMETRO", _$[$0].first_line, _$[$0].first_column, "black" );     
                                                                        nodo_prueba = $$[$0][1];
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        lista_temporal_3 = []; lista_temporal_3.push(nodo_graf)
                                                                        
                                                                        lista_temporal = []; lista_temporal.push(lstmet); lista_temporal.push(lista_temporal_3);this.$ = lista_temporal;
                                                                        
break;
case 29:
lista_temporal = []; val = new DECLARACION_VARIABLE($$[$0-1], $$[$0], undefined, _$[$0].first_line, _$[$0].first_column);lista_temporal.push(val);
                                                nodo_graf = new NODO_GRAFICAS( "DECLARACION VARIABLE", _$[$0-1].first_line, _$[$0-1].first_column, "black" );
                                                nodo_graf.agregar_hijo($$[$0-1][1]);
                                                nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-1].first_line, _$[$0-1].first_column, "black" );
                                                nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0], _$[$0-1].first_line, _$[$0-1].first_column, "black" ))
                                                nodo_graf.agregar_hijo(nodo_prueba);
                                                lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                 
break;
case 30:
lista_temporal = []; val = new LLAMADA_METODO($$[$0-3],$$[$0-1][0]);lista_temporal.push(val);
                                                                        nodo_graf = new NODO_GRAFICAS( "LLAMADA METODO O FUNCION", _$[$0-3].first_line, _$[$0-3].first_column, "gray" );
                                                                        nodo_prueba=new NODO_GRAFICAS( "ID", _$[$0-3].first_line, _$[$0-3].first_column, "black" );
                                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                                        nodo_prueba=new NODO_GRAFICAS( "PARAMETROS", _$[$0-3].first_line, _$[$0-3].first_column, "black" );
                                                                        lista_temporal_3 = $$[$0-1][1]; for(let i = 0; i< lista_temporal_3.length;i++){nodo_prueba.agregar_hijo(lista_temporal_3[i]);if(i!=lista_temporal.length){nodo_prueba.agregar_hijo(new NODO_GRAFICAS( ",", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));}}
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                        
break;
case 31:
lista_temporal = []; val = new LLAMADA_METODO($$[$0-2],[]);lista_temporal.push(val);
                                                                        nodo_graf = new NODO_GRAFICAS( "LLAMADA METODO O FUNCION", _$[$0-2].first_line, _$[$0-2].first_column, "gray" );
                                                                        nodo_prueba=new NODO_GRAFICAS( "ID", _$[$0-2].first_line, _$[$0-2].first_column, "black" );
                                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, "black" ))
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                        
break;
case 32:
lista_temporal = $$[$0-2]; lista_temporal_2 = lista_temporal[0]; lista_temporal_2.push($$[$0][0]);lista_temporal.push(lista_temporal_2);
                                                                    lista_temporal_3 = lista_temporal[1]; nodo_graf = $$[$0][1]; lista_temporal_3.push(nodo_graf);
                                                                    lista_temporal.push(lista_temporal_3); this.$ = lista_temporal;
                                                                    
break;
case 33:
lista_temporal=[];let lstexp_llam = [];        lstexp_llam.push($$[$0][0]); lista_temporal.push(lstexp_llam);
                                                                   lista_temporal_3 = []
                                                                   nodo_graf = $$[$0][1]; lista_temporal_3.push(nodo_graf);
                                                                   lista_temporal.push(lista_temporal_3);this.$ = lista_temporal;
                                                                   
break;
case 34:
 lista_temporal = []; val = new ASIGNACION_VARIABLE($$[$0-2], $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column); lista_temporal.push(val);
                                                    nodo_graf = new NODO_GRAFICAS( "ASIGNACION VARIABLE", _$[$0-2].first_line, _$[$0-2].first_column, "green" );
                                                    nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-2].first_line, _$[$0-2].first_column, "skyblue" );//ID
                                                    nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                    nodo_prueba = new NODO_GRAFICAS( "=", _$[$0-2].first_line, _$[$0-2].first_column, "black" );//=
                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                    nodo_graf.agregar_hijo($$[$0][1]);//VALOR
                                                    nodo_prueba = new NODO_GRAFICAS( ";", _$[$0-2].first_line, _$[$0-2].first_column, "black" );//;
                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                    
break;
case 35:
lista_temporal = []; val = new ASIGNACION_VARIABLE($$[$0-2], $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column);lista_temporal.push(val)
                                                    nodo_graf = new NODO_GRAFICAS( "ASIGNACION VARIABLE", _$[$0-2].first_line, _$[$0-2].first_column, "green" );
                                                        nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-2].first_line, _$[$0-2].first_column, "skyblue" );//ID
                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column, "black" ))
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        nodo_prueba = new NODO_GRAFICAS( "=", _$[$0-2].first_line, _$[$0-2].first_column, "black" );//=
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        nodo_graf.agregar_hijo($$[$0][1]);//VALOR
                                                        nodo_prueba = new NODO_GRAFICAS( ";", _$[$0-2].first_line, _$[$0-2].first_column, "black" );//;
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        lista_temporal=[];lista_temporal.push(val);lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                    
break;
case 36:
lista_temporal = []; val = new VALIDAR_EXISTE_VARIABLE($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
                                                        val = new OPERACION_UNARIA($$[$0], val, _$[$0].first_line, _$[$0].first_column);
                                                        val = new ASIGNACION_VARIABLE($$[$0-1],val, _$[$0-1].first_line, _$[$0-1].first_column); lista_temporal.push(val);
                                                        nodo_graf = new NODO_GRAFICAS( "ASIGNACION VARIABLE", _$[$0-1].first_line, _$[$0-1].first_column, "green" );
                                                        nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-1].first_line, _$[$0-1].first_column, "skyblue" );//ID
                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( "++", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                                        nodo_prueba = new NODO_GRAFICAS( ";", _$[$0-1].first_line, _$[$0-1].first_column, "black" );//;
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                       
break;
case 37:
 lista_temporal = []; val = new VALIDAR_EXISTE_VARIABLE($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
                                                        val = new OPERACION_UNARIA($$[$0], val, _$[$0].first_line, _$[$0].first_column);
                                                        val = new ASIGNACION_VARIABLE($$[$0-1],val, _$[$0-1].first_line, _$[$0-1].first_column); lista_temporal.push(val);
                                                        nodo_graf = new NODO_GRAFICAS( "ASIGNACION VARIABLE", _$[$0-1].first_line, _$[$0-1].first_column, "green" );
                                                        nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-1].first_line, _$[$0-1].first_column, "skyblue" );//ID
                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( "++", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                                        nodo_prueba = new NODO_GRAFICAS( ";", _$[$0-1].first_line, _$[$0-1].first_column, "black" );//;
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                       
break;
case 38:
lista_temporal = []; val = new ASIGNACION_VECTOR($$[$0-6], $$[$0-4][0], $$[$0-1][0], _$[$0-6].first_line, _$[$0-6].first_column); lista_temporal.push(val);
                                                                    nodo_graf = new NODO_GRAFICAS( "ASIGNACION VECTOR", _$[$0-6].first_line, _$[$0-6].first_column, "green" );
                                                                    nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-6].first_line, _$[$0-6].first_column, "skyblue" );//ID
                                                                    nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-6], _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "[", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                    nodo_graf.agregar_hijo($$[$0-4][1]);
                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "]", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "=", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                    nodo_graf.agregar_hijo($$[$0-1][1]);
                                                                    nodo_prueba = new NODO_GRAFICAS( ";", _$[$0-6].first_line, _$[$0-6].first_column, "black" );//;
                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                    
break;
case 39:
lista_temporal = []; val = new OPERACION_TERNARIA($$[$0-4][0], $$[$0-2][0], $$[$0][0], _$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                                    nodo_graf = new NODO_GRAFICAS( "OPERACION TERNARIA", _$[$0-4].first_line, _$[$0-4].first_column, "skyblue" );
                                                                    nodo_graf.agregar_hijo($$[$0-4][1]);
                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "?", _$[$0-4].first_line, _$[$0-4].first_column, "skyblue" ));
                                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ":", _$[$0-4].first_line, _$[$0-4].first_column, "skyblue" ));
                                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                    
break;
case 40:
val = $$[$0-1][0]; lista_temporal = []; lista_temporal.push(val); 
                                                nodo_graf = new NODO_GRAFICAS( "INSTRUCCIONES", _$[$0-2].first_line, _$[$0-2].first_column, "blue" );
                                                    lista_temporal_3 = $$[$0-1][1];
                                                    for(let i = 0; i<lista_temporal_3.length;i++){nodo_graf.agregar_hijo(lista_temporal_3[i])}
                                                lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                
break;
case 41:
val = []; lista_temporal = []; lista_temporal.push(val)
                                    nodo_graf = new NODO_GRAFICAS( "INSTRUCCIONES FUNCION", _$[$0-1].first_line, _$[$0-1].first_column, "skyblue" );
                                    lista_temporal.push(nodo_graf); this.$= lista_temporal;
                                    
break;
case 42:
lista_temporal = []; val = new IF($$[$0-2][0], $$[$0][0], [], _$[$0-4].first_line, _$[$0-4].first_column); lista_temporal.push(val);
                                                                                                    nodo_graf = new NODO_GRAFICAS( "FUNCION IF", _$[$0-4].first_line, _$[$0-4].first_column, "yellow" );
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: IF", _$[$0-4].first_line, _$[$0-4].first_column, "yellow" ));
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-4].first_line, _$[$0-4].first_column, "yellow" ));
                                                                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-4].first_line, _$[$0-4].first_column, "yellow" ));
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                                    lista_temporal.push(nodo_graf);this.$ = lista_temporal;
                                                                                                    
break;
case 43:
lista_temporal = []; val = new IF($$[$0-4][0], $$[$0-2][0], $$[$0][0], _$[$0-6].first_line, _$[$0-6].first_column); lista_temporal.push(val);
                                                                                                    nodo_graf = new NODO_GRAFICAS( "FUNCION IF", _$[$0-6].first_line, _$[$0-6].first_column, "yellow" );
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: IF", _$[$0-6].first_line, _$[$0-6].first_column, "yellow" ));
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-6].first_line, _$[$0-6].first_column, "yellow" ));
                                                                                                    nodo_graf.agregar_hijo($$[$0-4][1]);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-6].first_line, _$[$0-6].first_column, "yellow" ));
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_prueba = new NODO_GRAFICAS( "PALABRA RESERVADA: ELSE", _$[$0-6].first_line, _$[$0-6].first_column, "yellow" );
                                                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    
                                                                                                    lista_temporal.push(nodo_graf);this.$ = lista_temporal;
                                                                                                    
break;
case 44:
lista_temporal = []; let funcion_else_if = []; funcion_else_if.push($$[$0][0]); 
                                                                                                     val = new IF($$[$0-4][0], $$[$0-2][0], funcion_else_if, _$[$0-6].first_line, _$[$0-6].first_column); lista_temporal.push(val);
                                                                                                    nodo_graf = new NODO_GRAFICAS( "FUNCION IF", _$[$0-6].first_line, _$[$0-6].first_column, "yellow" );
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: IF", _$[$0-6].first_line, _$[$0-6].first_column, "yellow" ));
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-6].first_line, _$[$0-6].first_column, "yellow" ));
                                                                                                    nodo_graf.agregar_hijo($$[$0-4][1]);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-6].first_line, _$[$0-6].first_column, "yellow" ));
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_prueba = new NODO_GRAFICAS( "PALABRA RESERVADA: ELSE", _$[$0-6].first_line, _$[$0-6].first_column, "yellow" );
                                                                                                    nodo_prueba.agregar_hijo($$[$0][1]);
                                                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                                                    lista_temporal.push(nodo_graf);this.$ = lista_temporal;
                                                                                                    
break;
case 45:
lista_temporal = []; val = new PRINT($$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                        nodo_graf = new NODO_GRAFICAS( "FUNCION PRINT", _$[$0-3].first_line, _$[$0-3].first_column, "blue" );
                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: PRINT", _$[$0-3].first_line, _$[$0-3].first_column, "blue" ));
                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                        nodo_graf.agregar_hijo($$[$0-1][1]);
                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                        
break;
case 46:
lista_temporal = []; val = new WHILE($$[$0-2][0],$$[$0][0], _$[$0-4].first_line, _$[$0-4].first_column); lista_temporal.push(val);
                                                                                nodo_graf = new NODO_GRAFICAS( "FUNCION WHILE", _$[$0-4].first_line, _$[$0-4].first_column, "blue" );
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: WHILE", _$[$0-4].first_line, _$[$0-4].first_column, "blue" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo($$[$0][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                
break;
case 47:
lista_temporal = []; val = new FOR($$[$0-6][0],$$[$0-4][0],$$[$0-2][0],$$[$0][0], _$[$0-8].first_line, _$[$0-8].first_column); lista_temporal.push(val);
                                                                                                                    nodo_graf = new NODO_GRAFICAS( "FUNCION FOR", _$[$0-8].first_line, _$[$0-8].first_column, "blue" );
                                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: FOR", _$[$0-8].first_line, _$[$0-8].first_column, "blue" ));
                                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                                                                    nodo_graf.agregar_hijo($$[$0-6][1]);
                                                                                                                    //nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                                                                    nodo_graf.agregar_hijo($$[$0-4][1]);
                                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                                                    
break;
case 48:
lista_temporal = [];val = new DO_WHILE($$[$0-1][0],$$[$0-4][0], _$[$0-5].first_line, _$[$0-5].first_column);lista_temporal.push(val);
                                                                                
                                                                                nodo_graf = new NODO_GRAFICAS( "FUNCION DO WHILE", _$[$0-5].first_line, _$[$0-5].first_column, "blue" );
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: DO", _$[$0-5].first_line, _$[$0-5].first_column, "blue" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo($$[$0-4][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: WHILE", _$[$0-5].first_line, _$[$0-5].first_column, "blue" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo($$[$0-1][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                                                lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                
break;
case 49:
lista_temporal = [];val = $$[$0][0];lista_temporal.push(val); nodo_graf = $$[$0][1]; lista_temporal.push(nodo_graf); this.$ =lista_temporal;
break;
case 50:
lista_temporal = [];val = $$[$0][0];lista_temporal.push(val); nodo_graf = $$[$0][1]; lista_temporal.push(nodo_graf);this.$ =lista_temporal;
break;
case 51:
lista_temporal = []; val = new SWITCH($$[$0-4][0],$$[$0-1][0],[],_$[$0-6].first_line, _$[$0-6].first_column); lista_temporal.push(val);
                                                                                        nodo_graf = new NODO_GRAFICAS( "FUNCION SWITCH", _$[$0-6].first_line, _$[$0-6].first_column, "blue" );
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: SWITCH", _$[$0-6].first_line, _$[$0-6].first_column, "blue" ));
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-6].first_line, _$[$0-6].first_column, "blue" ));
                                                                                        nodo_graf.agregar_hijo( $$[$0-4][1]);
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-6].first_line, _$[$0-6].first_column, "blue" ));
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-6].first_line, _$[$0-6].first_column, "blue" ));
                                                                                        nodo_prueba= new NODO_GRAFICAS( "LISTA CASES", _$[$0-6].first_line, _$[$0-6].first_column, "blue" );
                                                                                        lista_temporal_3 = $$[$0-1][1];
                                                                                        for(let i = 0;i<lista_temporal_3.length;i++){console.log("CASE");nodo_prueba.agregar_hijo(lista_temporal_3[i]);}
                                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-6].first_line, _$[$0-6].first_column, "blue" ));
                                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                        
break;
case 52:
lista_temporal = []; val = new SWITCH($$[$0-5][0],$$[$0-2][0],$$[$0-1][0],_$[$0-7].first_line, _$[$0-7].first_column); lista_temporal.push(val);
                                                                                        nodo_graf = new NODO_GRAFICAS( "FUNCION SWITCH", _$[$0-7].first_line, _$[$0-7].first_column, "blue" );
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: SWITCH", _$[$0-7].first_line, _$[$0-7].first_column, "blue" ));
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-7].first_line, _$[$0-7].first_column, "blue" ));
                                                                                        nodo_graf.agregar_hijo( $$[$0-5][1]);
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-7].first_line, _$[$0-7].first_column, "blue" ));
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-7].first_line, _$[$0-7].first_column, "blue" ));
                                                                                        
                                                                                        
                                                                                        lista_temporal_3 = $$[$0-2][1];
                                                                                        nodo_prueba= new NODO_GRAFICAS( "LISTA CASES", _$[$0-7].first_line, _$[$0-7].first_column, "blue" );
                                                                                        for(let i = 0;i<lista_temporal_3.length;i++){console.log("CASE");nodo_prueba.agregar_hijo(lista_temporal_3[i]);}
                                                                                        
                                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                                        nodo_graf.agregar_hijo($$[$0-1][1]);
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-7].first_line, _$[$0-7].first_column, "blue" ));
                                                                                        
                                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                        
break;
case 53:
lista_temporal=[]; val = new SWITCH($$[$0-4][0],[],$$[$0-1][0],_$[$0-6].first_line, _$[$0-6].first_column); lista_temporal.push(val);
                                                                                        nodo_graf = new NODO_GRAFICAS( "FUNCION SWITCH", _$[$0-6].first_line, _$[$0-6].first_column, "blue" );
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: SWITCH", _$[$0-6].first_line, _$[$0-6].first_column, "blue" ));
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-6].first_line, _$[$0-6].first_column, "blue" ));
                                                                                        nodo_graf.agregar_hijo( $$[$0-4][1]);
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-6].first_line, _$[$0-6].first_column, "blue" ));
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-6].first_line, _$[$0-6].first_column, "blue" ));
                                                                                        nodo_graf.agregar_hijo($$[$0-1][1]);
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-6].first_line, _$[$0-6].first_column, "blue" ));
                                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                        
break;
case 54:
lista_temporal = $$[$0-1]; lista_temporal_2 = lista_temporal[0]; lista_temporal_2.push($$[$0][0]); 
                                        lista_temporal_3 = lista_temporal[1];
                                        nodo_graf = $$[$0][1];
                                        lista_temporal_3.push(nodo_graf);
                                        lista_temporal = [];lista_temporal.push(lista_temporal_2); lista_temporal.push(lista_temporal_3);  this.$ = lista_temporal;
                                        
break;
case 55:
lista_temporal = [];let lstswitch = [];        lstswitch.push($$[$0][0]);       lista_temporal.push(lstswitch);
                                        nodo_graf = $$[$0][1];
                                        lista_temporal_3 = []; lista_temporal_3.push(nodo_graf);
                                        lista_temporal.push(lista_temporal_3); this.$ = lista_temporal;
                                        
break;
case 56:
lista_temporal = []; val = new CASE($$[$0-2][0],$$[$0][0], _$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                        nodo_graf = new NODO_GRAFICAS( "CASE", _$[$0-3].first_line, _$[$0-3].first_column, "blue" );
                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: CASE", _$[$0-3].first_line, _$[$0-3].first_column, "blue" ));
                                                        nodo_graf.agregar_hijo($$[$0-2][1]);
                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ":", _$[$0-3].first_line, _$[$0-3].first_column, "blue" ));
                                                        nodo_prueba = new NODO_GRAFICAS( "INSTRUCCIONES", _$[$0-3].first_line, _$[$0-3].first_column, "blue" );
                                                        lista_temporal_3 = $$[$0][1];
                                                        for(let i = 0; i<lista_temporal_3.length;i++){nodo_prueba.agregar_hijo(lista_temporal_3[i])}
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                        
break;
case 57:
lista_temporal = []; val = $$[$0][0]; lista_temporal.push(val);

                                                    nodo_graf = new NODO_GRAFICAS( "DEFAULT", _$[$0-2].first_line, _$[$0-2].first_column, "blue" );
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: DEFAULT", _$[$0-2].first_line, _$[$0-2].first_column, "blue" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ":", _$[$0-2].first_line, _$[$0-2].first_column, "blue" ));
                                                    nodo_prueba = new NODO_GRAFICAS( "INSTRUCCIONES", _$[$0-2].first_line, _$[$0-2].first_column, "blue" );
                                                    lista_temporal_3 = $$[$0][1];
                                                    for(let i = 0; i<lista_temporal_3.length;i++){nodo_prueba.agregar_hijo(lista_temporal_3[i])}
                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                    
break;
case 58:
lista_temporal = []; val = $$[$0][0]; lista_temporal.push(val);
                                            lista_temporal_3 = $$[$0][1];
                                            lista_temporal.push(lista_temporal_3); this.$ = lista_temporal;
                                            
break;
case 59:
lista_temporal = []; val = []; lista_temporal.push(val)
                                            lista_temporal_3 = []
                                            lista_temporal.push(lista_temporal_3); this.$ = lista_temporal;
                                            
break;
case 60:
 val = new Tipo(TIPO_DATO.INT);     nodo_graf = new NODO_GRAFICAS( "TIPO", _$[$0].first_line, _$[$0].first_column, "skyblue" );    nodo_prueba = new NODO_GRAFICAS( "INT", _$[$0].first_line, _$[$0].first_column, "black" );    nodo_graf.agregar_hijo(nodo_prueba);  lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 61:
 val = new Tipo(TIPO_DATO.BOOLEAN); nodo_graf = new NODO_GRAFICAS( "TIPO", _$[$0].first_line, _$[$0].first_column, "skyblue" );    nodo_prueba = new NODO_GRAFICAS( "BOOLEAN", _$[$0].first_line, _$[$0].first_column, "black" );    nodo_graf.agregar_hijo(nodo_prueba);  lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 62:
 val = new Tipo(TIPO_DATO.STRING);  nodo_graf = new NODO_GRAFICAS( "TIPO", _$[$0].first_line, _$[$0].first_column, "skyblue" );    nodo_prueba = new NODO_GRAFICAS( "STRING", _$[$0].first_line, _$[$0].first_column, "black" );    nodo_graf.agregar_hijo(nodo_prueba);  lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 63:
 val = new Tipo(TIPO_DATO.DOUBLE);  nodo_graf = new NODO_GRAFICAS( "TIPO", _$[$0].first_line, _$[$0].first_column, "skyblue" );    nodo_prueba = new NODO_GRAFICAS( "DOUBLE", _$[$0].first_line, _$[$0].first_column, "black" );    nodo_graf.agregar_hijo(nodo_prueba);  lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 64:
 val = new Tipo(TIPO_DATO.CHAR);    nodo_graf = new NODO_GRAFICAS( "TIPO", _$[$0].first_line, _$[$0].first_column, "skyblue" );    nodo_prueba = new NODO_GRAFICAS( "CHAR", _$[$0].first_line, _$[$0].first_column, "black" );    nodo_graf.agregar_hijo(nodo_prueba);  lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 65:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION ARITMETICA", _$[$0-2].first_line, _$[$0-2].first_column, "skyblue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);nodo_graf.agregar_hijo(new NODO_GRAFICAS( "+", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 66:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION ARITMETICA", _$[$0-2].first_line, _$[$0-2].first_column, "skyblue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);nodo_graf.agregar_hijo(new NODO_GRAFICAS( "-", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 67:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION ARITMETICA", _$[$0-2].first_line, _$[$0-2].first_column, "skyblue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);nodo_graf.agregar_hijo(new NODO_GRAFICAS( "*", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 68:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION ARITMETICA", _$[$0-2].first_line, _$[$0-2].first_column, "skyblue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);nodo_graf.agregar_hijo(new NODO_GRAFICAS( "/", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 69:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION ARITMETICA", _$[$0-2].first_line, _$[$0-2].first_column, "skyblue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);nodo_graf.agregar_hijo(new NODO_GRAFICAS( "^", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 70:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION ARITMETICA", _$[$0-2].first_line, _$[$0-2].first_column, "skyblue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);nodo_graf.agregar_hijo(new NODO_GRAFICAS( "%", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 71:
val = new OPERACION_UNARIA($$[$0-1], $$[$0][0], _$[$0].first_line, _$[$0].first_column);        nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0-1].first_line, _$[$0-1].first_column, "skyblue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "-", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 72:
val = $$[$0-1][0];                                                                  nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0-2].first_line, _$[$0-2].first_column, "skyblue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0-1][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    
break;
case 73:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION RELACIONAL", _$[$0-2].first_line, _$[$0-2].first_column, "orange" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "==", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 74:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION RELACIONAL", _$[$0-2].first_line, _$[$0-2].first_column, "orange" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "!=", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 75:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION RELACIONAL", _$[$0-2].first_line, _$[$0-2].first_column, "orange" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "<", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 76:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION RELACIONAL", _$[$0-2].first_line, _$[$0-2].first_column, "orange" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ">", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 77:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION RELACIONAL", _$[$0-2].first_line, _$[$0-2].first_column, "orange" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "<=", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 78:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION RELACIONAL", _$[$0-2].first_line, _$[$0-2].first_column, "orange" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ">=", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 79:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION LOGICA", _$[$0-2].first_line, _$[$0-2].first_column, "red" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "||", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 80:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION LOGICA", _$[$0-2].first_line, _$[$0-2].first_column, "red" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "&&", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 81:
val = new OPERACION_UNARIA($$[$0-1], $$[$0][0], _$[$0].first_line, _$[$0].first_column);        nodo_graf = new NODO_GRAFICAS( "OPERACION LOGICA", _$[$0-1].first_line, _$[$0-1].first_column, "red" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "!", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 82:
lista_temporal = []; val = new OPERACION_UNARIA($$[$0], $$[$0-1][0], _$[$0].first_line, _$[$0].first_column); lista_temporal.push(val);        
                                                    //console.log("si hago la operacion");
                                                    nodo_graf = new NODO_GRAFICAS( "INCREMENTO", _$[$0-1].first_line, _$[$0-1].first_column, "blue" );
                                                    //nodo_graf.agregar_hijo($$[$0-1][1]);
                                                    //nodo_graf.agregar_hijo(new NODO_GRAFICAS( "++", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                                    lista_temporal.push(nodo_graf); this.$= lista_temporal;
                                                    
break;
case 83:
lista_temporal = []; val = new OPERACION_UNARIA($$[$0], $$[$0-1][0], _$[$0].first_line, _$[$0].first_column);lista_temporal.push(val);        
                                                    nodo_graf = new NODO_GRAFICAS( "DECREMENTO", _$[$0-1].first_line, _$[$0-1].first_column, "blue" );
                                                    nodo_graf.agregar_hijo($$[$0-1][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "--", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                                    lista_temporal.push(nodo_graf); this.$= lista_temporal;
                                                    
break;
case 84:
val = new CASTEOS("INT", $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column);              nodo_graf = new NODO_GRAFICAS( "CASTEO", _$[$0-3].first_line, _$[$0-3].first_column, "green" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "INT", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 85:
val = new CASTEOS("DOUBLE", $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column);           nodo_graf = new NODO_GRAFICAS( "CASTEO", _$[$0-3].first_line, _$[$0-3].first_column, "green" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "DOUBLE", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 86:
val = new CASTEOS("CHAR", $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column);             nodo_graf = new NODO_GRAFICAS( "CASTEO", _$[$0-3].first_line, _$[$0-3].first_column, "green" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "CHAR", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 87:
val = new CASTEOS("STRING", $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column);           nodo_graf = new NODO_GRAFICAS( "CASTEO", _$[$0-3].first_line, _$[$0-3].first_column, "green" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "STRING", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 88:
val = new VALIDAR_EXISTE_VARIABLE($$[$0],_$[$0].first_line,_$[$0].first_column);          nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0].first_line, _$[$0].first_column, "skyblue" );     nodo_prueba = new NODO_GRAFICAS( "VARIABLE", _$[$0].first_line, _$[$0].first_column, "skyblue" );nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0], _$[$0].first_line, _$[$0].first_column, "black" )); nodo_graf.agregar_hijo(nodo_prueba);lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 89:
val = new VALIDAR_EXISTE_VECTOR($$[$0-3],$$[$0-1][0],_$[$0-3].first_line,_$[$0-3].first_column);      nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0-3].first_line, _$[$0-3].first_column, "skyblue" );     nodo_graf.agregar_hijo(new NODO_GRAFICAS( $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, "black" ));lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 90:
val = new Valor($$[$0],"INT",_$[$0].first_line,_$[$0].first_column);                      nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0].first_line, _$[$0].first_column, "skyblue" );     nodo_graf.agregar_hijo(new NODO_GRAFICAS( $$[$0], _$[$0].first_line, _$[$0].first_column, "black" ));lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 91:
val = new Valor($$[$0],"DOUBLE",_$[$0].first_line,_$[$0].first_column);                   nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0].first_line, _$[$0].first_column, "skyblue" );     nodo_graf.agregar_hijo(new NODO_GRAFICAS( $$[$0], _$[$0].first_line, _$[$0].first_column, "black" ));lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 92:
val = new Valor($$[$0],"CHAR",_$[$0].first_line,_$[$0].first_column);                     nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0].first_line, _$[$0].first_column, "skyblue" );     nodo_graf.agregar_hijo(new NODO_GRAFICAS( $$[$0], _$[$0].first_line, _$[$0].first_column, "black" ));lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 93:
val = new Valor($$[$0],"STRING",_$[$0].first_line,_$[$0].first_column);                   nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0].first_line, _$[$0].first_column, "skyblue" );     nodo_graf.agregar_hijo(new NODO_GRAFICAS( $$[$0], _$[$0].first_line, _$[$0].first_column, "black" ));lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 94:
val = new Valor($$[$0],"true",_$[$0].first_line,_$[$0].first_column);                     nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0].first_line, _$[$0].first_column, "skyblue" );     nodo_graf.agregar_hijo(new NODO_GRAFICAS( "TRUE", _$[$0].first_line, _$[$0].first_column, "black" ));lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal   
break;
case 95:
val = new Valor($$[$0],"false",_$[$0].first_line,_$[$0].first_column);                    nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0].first_line, _$[$0].first_column, "skyblue" );     nodo_graf.agregar_hijo(new NODO_GRAFICAS( "FALSE", _$[$0].first_line, _$[$0].first_column, "black" )); lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,21:17,22:$V1,33:$V2,44:$V3,46:$V4,47:$V5,48:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd},{1:[3]},{2:$V0,5:[1,31],6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,21:17,22:$V1,33:$V2,44:$V3,46:$V4,47:$V5,48:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd},o($Ve,[2,3]),{8:[1,33]},{8:[1,34]},o($Ve,[2,6]),o($Ve,[2,7]),{8:[1,35]},o($Ve,[2,9]),o($Ve,[2,10]),{8:[1,36]},o($Ve,[2,12]),o($Ve,[2,13]),{8:[1,37]},o($Ve,[2,15]),o($Ve,[2,17],{20:[1,38]}),{22:$Vf,26:[1,40]},{22:[1,41]},{23:$Vg,26:[1,46],34:[1,42],40:$Vh,41:$Vi},{34:[1,47]},{34:[1,48]},{34:[1,49]},{34:[1,50]},{29:$Vj,37:51},{34:[1,53]},o($Vk,[2,60]),o($Vk,[2,61]),o($Vk,[2,62]),o($Vk,[2,63]),o($Vk,[2,64]),{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,8]),o($Ve,[2,11]),o($Ve,[2,14]),o($Ve,[2,16]),{8:[2,19],23:[1,54]},{27:[1,55]},{34:[1,56]},{22:$Vl,24:59,34:$Vm,36:[1,58],39:57,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:70,25:71,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},o($Vv,[2,36]),o($Vv,[2,37]),{22:$Vl,24:72,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:73,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:74,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:75,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{7:78,12:77,21:80,22:$Vw,49:76,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd},{47:[1,81]},{2:$V0,4:82,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,21:17,22:$V1,31:[1,83],33:$V2,44:$V3,46:$V4,47:$V5,48:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd},{22:$Vl,24:84,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:85,25:86,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:[1,87]},{21:91,35:88,36:[1,89],38:90,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd},{32:[1,93],36:[1,92]},o($Ve,[2,31]),o($Vx,[2,33],{40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN}),{22:$Vl,24:110,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:111,34:$Vm,58:[1,112],60:[1,115],61:[1,113],62:[1,114],64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:116,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},o($VO,[2,88],{26:[1,117]}),o($VO,[2,90]),o($VO,[2,91]),o($VO,[2,92]),o($VO,[2,93]),o($VO,[2,94]),o($VO,[2,95]),o($Vv,[2,34],{40:$Vy,41:$Vz,42:$VP,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN}),o($Vv,[2,35]),{27:[1,119],40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN},{36:[1,120],40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN},{36:[1,121],40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN},{36:[1,122],40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN},{8:[1,123]},{8:[2,49]},{8:[2,50]},{23:$Vg,40:$Vh,41:$Vi},{22:$Vf},{34:[1,124]},{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,21:17,22:$V1,31:[1,125],33:$V2,44:$V3,46:$V4,47:$V5,48:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd},o($VQ,[2,41]),{36:[1,126],40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN},{8:[2,18],40:$Vy,41:$Vz,42:$VP,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN},{8:[2,20]},{23:[1,127]},{32:[1,129],36:[1,128]},{29:$Vj,37:130},o($Vx,[2,28]),{22:[1,131]},o($Ve,[2,30]),{22:$Vl,24:132,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:133,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:134,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:135,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:136,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:137,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:138,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:139,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:140,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:141,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:142,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:143,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:144,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:145,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:146,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},o($VO,[2,82]),o($VO,[2,83]),o($VO,[2,71]),{36:[1,147],40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN},{36:[1,148]},{36:[1,149]},{36:[1,150]},{36:[1,151]},o($VO,[2,81]),{22:$Vl,24:152,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:153,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{23:[1,154]},{29:$Vj,37:155},{8:[2,45]},{29:$Vj,37:156},{22:$Vl,24:157,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:158,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},o($VQ,[2,40]),{29:[1,159]},{28:[1,160],29:[1,161]},{29:$Vj,37:162},{21:91,38:163,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd},o($Ve,[2,26]),o($Vx,[2,29]),o($Vx,[2,32],{40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN}),o($VR,[2,65],{65:$VC,66:$VD,67:$VE,68:$VF}),o($VR,[2,66],{65:$VC,66:$VD,67:$VE,68:$VF}),o($VS,[2,67],{67:$VE}),o($VS,[2,68],{67:$VE}),o($VO,[2,69]),o($VS,[2,70],{67:$VE}),o($VT,[2,73],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o($VT,[2,74],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o($VT,[2,75],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o($VT,[2,76],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o($VT,[2,77],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o($VT,[2,78],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o([8,27,31,32,36,40,41,42,43,75],[2,79],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,76:$VN}),o([8,27,31,32,36,40,41,42,43,75,76],[2,80],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL}),o($VO,[2,72]),{22:$Vl,24:164,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:165,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:166,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{22:$Vl,24:167,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{27:[1,168],40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN},{40:$Vy,41:$Vz,43:[1,169],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN},{22:$Vl,24:170,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},o($Ve,[2,42],{45:[1,171]}),o($Ve,[2,46]),{8:[1,172],40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN},{36:[1,173],40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN},{52:174,53:175,54:176,55:$VU,57:$VV},{21:179,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd},{22:$Vl,24:181,30:180,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},o($Ve,[2,25]),o($Vx,[2,27]),o($VO,[2,84]),o($VO,[2,85]),o($VO,[2,86]),o($VO,[2,87]),o($VO,[2,89]),{22:$Vl,24:182,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{8:[1,183],40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN},{14:185,29:$Vj,37:184,44:$V3},{12:186,22:$Vw},{8:[2,48]},{31:[1,187],53:188,54:189,55:$VU,57:$VV},{31:[1,190]},o($VW,[2,55]),{43:[1,191]},{22:$Vl,24:192,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{26:[1,193]},{31:[1,194],32:[1,195]},o($VX,[2,24],{40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN}),o($Vv,[2,39],{40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN}),o($Ve,[2,38]),o($Ve,[2,43]),o($Ve,[2,44]),{36:[1,196]},o($Ve,[2,51]),{31:[1,197]},o($VW,[2,54]),o($Ve,[2,53]),{2:$V0,4:199,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,21:17,22:$V1,31:$VY,33:$V2,44:$V3,46:$V4,47:$V5,48:$V6,50:$V7,51:$V8,56:198,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd},{40:$Vy,41:$Vz,43:[1,200],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN},{22:$Vl,24:201,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{8:[2,22]},{22:$Vl,24:202,34:$Vm,64:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu},{29:$Vj,37:203},o($Ve,[2,52]),{31:[2,57]},o($VW,[2,58],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,21:17,6:32,2:$V0,22:$V1,33:$V2,44:$V3,46:$V4,47:$V5,48:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd}),o($VW,$VY,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,21:17,4:199,56:204,2:$V0,22:$V1,33:$V2,44:$V3,46:$V4,47:$V5,48:$V6,50:$V7,51:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd}),{27:[1,205],40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN},o($VX,[2,23],{40:$Vy,41:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN}),o($Ve,[2,47]),o($VW,[2,56]),{8:[2,21]}],
defaultActions: {31:[2,1],77:[2,49],78:[2,50],86:[2,20],121:[2,45],173:[2,48],194:[2,22],198:[2,57],205:[2,21]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var lexico=[];
    module.exports.lexico = lexico;
    let lista_temporal = [];
    let lista_temporal_2 = [];
    let lista_temporal_3 = [];
    let nodo_graf;
    let nodo_prueba;
    let val;

    let NODO_GRAFICAS               =   require("./src/arbol/NODO_GRAFICA").NODO_GRAFICA; 
    let LISTA_EJECUCIONES           =   require("./src/arbol/LISTA_EJECUCIONES").LISTA_EJECUCIONES;
    let Tipo                        =   require("./src/arbol/Tipo").Tipo;
    let TIPO_DATO                   =   require("./src/arbol/Tipo").TIPO_DATO;
    let DECLARACION_VARIABLE        =   require("./src/instrucciones/VARIABLES").DECLARACION_VARIABLE; 
    let DECLARACION_VECTOR_TIPO1    =   require("./src/instrucciones/VARIABLES").DECLARACION_VECTOR_TIPO1; 
    let ASIGNACION_VARIABLE         =   require("./src/instrucciones/VARIABLES").ASIGNACION_VARIABLE;
    let ASIGNACION_VECTOR           =   require("./src/instrucciones/VARIABLES").ASIGNACION_VECTOR;
    let VALIDAR_EXISTE_VARIABLE     =   require("./src/instrucciones/VARIABLES").VALIDAR_EXISTE_VARIABLE;
    let VALIDAR_EXISTE_VECTOR       =   require("./src/instrucciones/VARIABLES").VALIDAR_EXISTE_VECTOR;
    let Valor                       =   require("./src/instrucciones/Valor").Valor;
    let OPERACIONES                 =   require("./src/instrucciones/OPERACIONES").OPERACIONES;
    let OPERACION_UNARIA            =   require("./src/instrucciones/OPERACION_UNARIA").OPERACION_UNARIA;
    let IF                          =   require("./src/instrucciones/FUNCIONES").IF;
    let PRINT                       =   require("./src/instrucciones/FUNCIONES").PRINT;
    let WHILE                       =   require("./src/instrucciones/FUNCIONES").WHILE;
    let FOR                         =   require("./src/instrucciones/FUNCIONES").FOR;
    let DO_WHILE                    =   require("./src/instrucciones/FUNCIONES").DO_WHILE;
    let SWITCH                      =   require("./src/instrucciones/FUNCIONES").SWITCH;
    let CASE                        =   require("./src/instrucciones/FUNCIONES").CASE;
    let OPERACION_TERNARIA          =   require("./src/instrucciones/OPERACION_TERNARIA").OPERACION_TERNARIA;
    let CASTEOS                     =   require("./src/instrucciones/CASTEOS").CASTEOS;
    let DECLARACION_METODO          =   require("./src/instrucciones/VARIABLES").DECLARACION_METODO;
    let LLAMADA_METODO              =   require("./src/instrucciones/VARIABLES").LLAMADA_METODO;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 5;
break;
case 2:lexico.push("COMENTARIO SIMPLE: "+yy_.yytext)
break;
case 3:lexico.push("COMENTARIO MULTILINEA: "+yy_.yytext)
break;
case 4:lexico.push("INT");         return 58; 
break;
case 5:lexico.push("DOUBLE");      return 61;
break;
case 6:lexico.push("BOOLEAN");     return 59;
break;
case 7:lexico.push("CHAR");        return 62;
break;
case 8:lexico.push("STRING");      return 60;
break;
case 9:lexico.push("TRUE");        return 82;
break;
case 10:lexico.push("FALSE");       return 83;
break;
case 11:lexico.push("IF");          return 44;
break;
case 12:lexico.push("PRINT");       return 46;
break;
case 13:lexico.push("ELSE");        return 45;
break;
case 14:lexico.push("VOID");        return 33;
break;
case 15:lexico.push("RETURN");      return 'RRETURN';
break;
case 16:lexico.push("SWITCH");      return 51;
break;
case 17:lexico.push("DCASE");       return 55;
break;
case 18:lexico.push("DEFAULT");     return 57;
break;
case 19:lexico.push("WHILE");       return 47;
break;
case 20:lexico.push("FOR");         return 48;
break;
case 21:lexico.push("DO");          return 50;
break;
case 22:lexico.push("BREAK");       return 'RBREAK';
break;
case 23:lexico.push("CONTINUE");    return 'RCONTINUE';
break;
case 24:lexico.push("RETURN");      return 'RRETURN';
break;
case 25:lexico.push("RNEW");        return 28;
break;
case 26:lexico.push("TOLOWER");     return 'RTOLOWER';
break;
case 27:lexico.push("TOUPPER");     return 'RTOUPPER';
break;
case 28:lexico.push("LENGHT");      return 'RLENGTH';
break;
case 29:lexico.push("TRUNCATE");    return 'RTRUNCATE';
break;
case 30:lexico.push("ROUND");       return 'RROUND';
break;
case 31:lexico.push("TYPEOF");      return 'RTYPEOF';
break;
case 32:lexico.push("TOSTRING");    return 'RTOSTRING';
break;
case 33:lexico.push("TOCHARARRAY"); return 'RTOCHARARRAY';
break;
case 34:lexico.push("MAIN");        return 'RMAIN';
break;
case 35: yy_.yytext = yy_.yytext.toLowerCase();            return 22;
break;
case 36: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);       return 81;
break;
case 37: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);       return 80; 
break;
case 38: return 79
break;
case 39: return 78 
break;
case 40:return '$'
break;
case 41:return 40;
break;
case 42:return 41;
break;
case 43:return 63;
break;
case 44:return 64;
break;
case 45:return 65;
break;
case 46:return 66;
break;
case 47:return 67;
break;
case 48:return 68;
break;
case 49:return 34;
break;
case 50:return 36;
break;
case 51:return 69;
break;
case 52:return 23;
break;
case 53:return 32;
break;
case 54:return 43;
break;
case 55:return 8;
break;
case 56:return 75;
break;
case 57:return 76;
break;
case 58:return 70;
break;
case 59:return 77;
break;
case 60:return 73;
break;
case 61:return 74;
break;
case 62:return 72;
break;
case 63:return 71;
break;
case 64:return 29;
break;
case 65:return 31;
break;
case 66:return 26;
break;
case 67:return 27;
break;
case 68:return 42;
break;
case 69:return 'SALTO_LINEA';
break;
case 70:return 'COMILLA_SIMPLE';
break;
case 71:return 'BARRA_INVERTIDA';
break;
case 72:return 'COMILLA_DOBLE';
break;
case 73:return 'TABULACION';
break;
case 74:
break;
}
},
rules: [/^(?:\s+)/i,/^(?:$)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:print\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:'((\\')|(\\")|(\\\\)|(\\n)|(\\t)|[^\\\n\'])?')/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/i,/^(?:\$)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:==)/i,/^(?:=)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?:\\n)/i,/^(?:\\')/i,/^(?:\\\\)/i,/^(?:")/i,/^(?:\\t)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}