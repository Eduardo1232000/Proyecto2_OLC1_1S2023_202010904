/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[2,5,18,27,34,39,40,41,43,44,45,46],$Vb=[1,30],$Vc=[1,32],$Vd=[1,33],$Ve=[1,34],$Vf=[18,22],$Vg=[1,47],$Vh=[1,45],$Vi=[1,44],$Vj=[1,46],$Vk=[1,48],$Vl=[1,49],$Vm=[1,50],$Vn=[1,51],$Vo=[1,52],$Vp=[1,53],$Vq=[8,36],$Vr=[1,61],$Vs=[1,80],$Vt=[1,81],$Vu=[1,82],$Vv=[1,66],$Vw=[1,67],$Vx=[1,68],$Vy=[1,69],$Vz=[1,70],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[1,74],$VE=[1,75],$VF=[1,76],$VG=[1,77],$VH=[1,78],$VI=[1,79],$VJ=[8,23,27,28,29,30,31,32,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60],$VK=[1,120],$VL=[8,23,27,28,29,30,31,32,36,47,48,53,54,55,56,57,58,59,60],$VM=[8,23,27,28,29,30,31,32,36,47,48,49,50,52,53,54,55,56,57,58,59,60],$VN=[8,23,27,28,29,30,31,32,36,53,54,55,56,57,58,59,60],$VO=[2,5,18,27,34,37,39,40,41,43,44,45,46],$VP=[27,28];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"DECLARACION_VARIABLE":7,";":8,"DECLARACION_VECTORES":9,"ASIGNACION_VARIABLE":10,"ASIGNACION_VECTORES":11,"FUNCION_IF":12,"FUNCION_PRINT":13,"FUNCION_WHILE":14,"FUNCION_FOR":15,"PTCOMA":16,"TIPO":17,"id":18,"=":19,"EXPRESION":20,"EXPRESION_IF":21,"[":22,"]":23,"RNEW":24,"{":25,"LISTA_EXPRESIONES":26,"}":27,",":28,"++":29,"--":30,"?":31,":":32,"INSTRUCCIONES_FUNCION":33,"RIF":34,"(":35,")":36,"RELSE":37,"IF":38,"RPRINT":39,"RWHILE":40,"RFOR":41,"DEC_O_ASIG":42,"RINT":43,"RBOOLEAN":44,"RSTRING":45,"RDOUBLE":46,"+":47,"-":48,"*":49,"/":50,"^":51,"%":52,"==":53,"!=":54,"<":55,">":56,"<=":57,">=":58,"||":59,"&&":60,"!":61,"RCHAR":62,"ENTERO":63,"DECIMAL":64,"CARACTER":65,"CADENA":66,"RTRUE":67,"RFALSE":68,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",16:"PTCOMA",18:"id",19:"=",22:"[",23:"]",24:"RNEW",25:"{",27:"}",28:",",29:"++",30:"--",31:"?",32:":",34:"RIF",35:"(",36:")",37:"RELSE",38:"IF",39:"RPRINT",40:"RWHILE",41:"RFOR",43:"RINT",44:"RBOOLEAN",45:"RSTRING",46:"RDOUBLE",47:"+",48:"-",49:"*",50:"/",51:"^",52:"%",53:"==",54:"!=",55:"<",56:">",57:"<=",58:">=",59:"||",60:"&&",61:"!",62:"RCHAR",63:"ENTERO",64:"DECIMAL",65:"CARACTER",66:"CADENA",67:"RTRUE",68:"RFALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,1],[7,4],[7,2],[7,4],[9,10],[9,8],[26,3],[26,1],[10,3],[10,3],[10,2],[10,2],[11,7],[21,5],[33,3],[33,2],[12,5],[12,7],[12,7],[13,4],[14,5],[15,9],[42,1],[42,1],[17,1],[17,1],[17,1],[17,1],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,2],[20,2],[20,4],[20,4],[20,4],[20,4],[20,1],[20,4],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                            console.log("Parse de Jison entrada: OK ");
                            let raiz = $$[$0-1]
                            this.$ = raiz;
                            return raiz;
                        
break;
case 2:
$$[$0-1].push($$[$0]);  this.$ = $$[$0-1];
break;
case 3:
   let lstsent = [];        lstsent.push($$[$0]);       this.$ = lstsent;
break;
case 4: case 5: case 6: case 9:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 10: case 11:
 this.$ = $$[$0]; 
break;
case 12: case 13:
console.error('Este es un error SINTACTICO');
break;
case 14: case 16:
this.$ = new DECLARACION_VARIABLE($$[$0-3], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 15:
this.$ = new DECLARACION_VARIABLE($$[$0-1], $$[$0], undefined, _$[$0].first_line, _$[$0].first_column); 
break;
case 17:
this.$ = new DECLARACION_VECTOR_TIPO1($$[$0-9], $$[$0-6], [],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column );
break;
case 18:
this.$ = new DECLARACION_VECTOR_TIPO1($$[$0-7], $$[$0-4], $$[$0-1],0,_$[$0-4].first_line,_$[$0-4].first_column );
break;
case 19:
$$[$0-2].push($$[$0]);  this.$ = $$[$0-2];
break;
case 20:
   let lstexp = [];        lstexp.push($$[$0]);       this.$ = lstexp;
break;
case 21: case 22:
 this.$ = new ASIGNACION_VARIABLE($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 23: case 24:
 this.$ = new VALIDAR_EXISTE_VARIABLE($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
                                                   this.$ = new OPERACION_UNARIA($$[$0], this.$, _$[$0].first_line, _$[$0].first_column);
                                                   this.$ = new ASIGNACION_VARIABLE($$[$0-1],this.$, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 25:
 this.$ = new ASIGNACION_VECTOR($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 26:
this.$ = new OPERACION_TERNARIA($$[$0-4], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 27: case 48:
this.$ = $$[$0-1];
break;
case 28:
this.$ = [];
break;
case 29:
this.$ = new IF($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 30:
this.$ = new IF($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 31:
let funcion_else_if = [];
                                                                                    funcion_else_if.push($$[$0]);
                                                                                    this.$ = funcion_else_if;
break;
case 32:
this.$ = new PRINT($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 33:
this.$ = new WHILE($$[$0-2],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 34:
this.$ = new FOR($$[$0-6],$$[$0-4],$$[$0-2],$$[$0], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 35: case 36:
this.$ = $$[$0]
break;
case 37:
 this.$ = new Tipo(TIPO_DATO.INT); 
break;
case 38:
 this.$ = new Tipo(TIPO_DATO.BOOLEAN); 
break;
case 39:
 this.$ = new Tipo(TIPO_DATO.STRING);  
break;
case 40:
 this.$ = new Tipo(TIPO_DATO.DOUBLE);  
break;
case 41: case 42: case 43: case 44: case 45: case 46: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56:
this.$ = new OPERACIONES($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 47: case 57:
this.$ = new OPERACION_UNARIA($$[$0-1], $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 58: case 59:
this.$ = new OPERACION_UNARIA($$[$0], $$[$0-1], _$[$0].first_line, _$[$0].first_column);
break;
case 60:
this.$ = new CASTEOS("INT", $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 61:
this.$ = new CASTEOS("DOUBLE", $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 62:
this.$ = new CASTEOS("CHAR", $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 63:
this.$ = new CASTEOS("STRING", $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 64:
this.$ = new VALIDAR_EXISTE_VARIABLE($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 65:
this.$ = new VALIDAR_EXISTE_VECTOR($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 66:
this.$ = new Valor($$[$0],"INT",_$[$0].first_line,_$[$0].first_column);
break;
case 67:
this.$ = new Valor($$[$0],"DOUBLE",_$[$0].first_line,_$[$0].first_column); 
break;
case 68:
this.$ = new Valor($$[$0],"CHAR",_$[$0].first_line,_$[$0].first_column);   
break;
case 69:
this.$ = new Valor($$[$0],"STRING",_$[$0].first_line,_$[$0].first_column); 
break;
case 70:
this.$ = new Valor($$[$0],"true",_$[$0].first_line,_$[$0].first_column);   
break;
case 71:
this.$ = new Valor($$[$0],"false",_$[$0].first_line,_$[$0].first_column);  
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,17:13,18:$V1,34:$V2,39:$V3,40:$V4,41:$V5,43:$V6,44:$V7,45:$V8,46:$V9},{1:[3]},{2:$V0,5:[1,23],6:24,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,17:13,18:$V1,34:$V2,39:$V3,40:$V4,41:$V5,43:$V6,44:$V7,45:$V8,46:$V9},o($Va,[2,3]),{8:[1,25]},{8:[1,26]},{8:[1,27]},o($Va,[2,7]),o($Va,[2,8]),{8:[1,28]},o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,13],{16:[1,29]}),{18:$Vb,22:[1,31]},{19:$Vc,22:[1,35],29:$Vd,30:$Ve},{35:[1,36]},{35:[1,37]},{35:[1,38]},{35:[1,39]},o($Vf,[2,37]),o($Vf,[2,38]),o($Vf,[2,39]),o($Vf,[2,40]),{1:[2,1]},o($Va,[2,2]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,9]),o($Va,[2,12]),{8:[2,15],19:[1,40]},{23:[1,41]},{18:$Vg,20:42,21:43,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},o($Vq,[2,23]),o($Vq,[2,24]),{18:$Vg,20:54,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:55,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:56,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:57,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{7:60,10:59,17:62,18:$Vr,42:58,43:$V6,44:$V7,45:$V8,46:$V9},{18:$Vg,20:63,21:64,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:[1,65]},o($Vq,[2,21],{29:$Vs,30:$Vt,31:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI}),o($Vq,[2,22]),{18:$Vg,20:83,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:84,35:$Vh,43:[1,85],45:[1,88],46:[1,86],48:$Vi,61:$Vj,62:[1,87],63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:89,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},o($VJ,[2,64],{22:[1,90]}),o($VJ,[2,66]),o($VJ,[2,67]),o($VJ,[2,68]),o($VJ,[2,69]),o($VJ,[2,70]),o($VJ,[2,71]),{23:[1,91],29:$Vs,30:$Vt,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},{29:$Vs,30:$Vt,36:[1,92],47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},{29:$Vs,30:$Vt,36:[1,93],47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},{29:$Vs,30:$Vt,36:[1,94],47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},{8:[1,95]},{8:[2,35]},{8:[2,36]},{19:$Vc,29:$Vd,30:$Ve},{18:$Vb},{8:[2,14],29:$Vs,30:$Vt,31:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},{8:[2,16]},{19:[1,96]},{18:$Vg,20:97,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:98,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:99,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:100,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:101,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:102,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:103,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:104,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:105,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:106,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:107,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:108,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:109,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:110,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},o($VJ,[2,58]),o($VJ,[2,59]),{18:$Vg,20:111,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},o($VJ,[2,47]),{29:$Vs,30:$Vt,36:[1,112],47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},{36:[1,113]},{36:[1,114]},{36:[1,115]},{36:[1,116]},o($VJ,[2,57]),{18:$Vg,20:117,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{19:[1,118]},{25:$VK,33:119},{8:[2,32]},{25:$VK,33:121},{18:$Vg,20:122,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{24:[1,123],25:[1,124]},o($VL,[2,41],{49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VL,[2,42],{49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VM,[2,43],{51:$Vz}),o($VM,[2,44],{51:$Vz}),o($VJ,[2,45]),o($VM,[2,46],{51:$Vz}),o($VN,[2,49],{47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VN,[2,50],{47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VN,[2,51],{47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VN,[2,52],{47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VN,[2,53],{47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VN,[2,54],{47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o([8,23,27,28,29,30,31,32,36,59],[2,55],{47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,60:$VI}),o([8,23,27,28,29,30,31,32,36,59,60],[2,56],{47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG}),{29:$Vs,30:$Vt,32:[1,125],47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},o($VJ,[2,48]),{18:$Vg,20:126,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:127,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:128,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:129,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{23:[1,130],29:$Vs,30:$Vt,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},{18:$Vg,20:131,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},o($Va,[2,29],{37:[1,132]}),{2:$V0,4:133,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,17:13,18:$V1,27:[1,134],34:$V2,39:$V3,40:$V4,41:$V5,43:$V6,44:$V7,45:$V8,46:$V9},o($Va,[2,33]),{8:[1,135],29:$Vs,30:$Vt,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},{17:136,43:$V6,44:$V7,45:$V8,46:$V9},{18:$Vg,20:138,26:137,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{18:$Vg,20:139,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},o($VJ,[2,60]),o($VJ,[2,61]),o($VJ,[2,62]),o($VJ,[2,63]),o($VJ,[2,65]),{8:[1,140],29:$Vs,30:$Vt,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},{25:$VK,33:141,38:[1,142]},{2:$V0,6:24,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,17:13,18:$V1,27:[1,143],34:$V2,39:$V3,40:$V4,41:$V5,43:$V6,44:$V7,45:$V8,46:$V9},o($VO,[2,28]),{10:144,18:$Vr},{22:[1,145]},{27:[1,146],28:[1,147]},o($VP,[2,20],{29:$Vs,30:$Vt,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI}),o($Vq,[2,26],{29:$Vs,30:$Vt,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI}),o($Va,[2,25]),o($Va,[2,30]),o($Va,[2,31]),o($VO,[2,27]),{36:[1,148]},{18:$Vg,20:149,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{8:[2,18]},{18:$Vg,20:150,35:$Vh,48:$Vi,61:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp},{25:$VK,33:151},{23:[1,152],29:$Vs,30:$Vt,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},o($VP,[2,19],{29:$Vs,30:$Vt,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI}),o($Va,[2,34]),{8:[2,17]}],
defaultActions: {23:[2,1],59:[2,35],60:[2,36],64:[2,16],93:[2,32],146:[2,18],152:[2,17]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var lexico=[];
    module.exports.lexico = lexico;

    let LISTA_EJECUCIONES           =   require("./src/arbol/LISTA_EJECUCIONES").LISTA_EJECUCIONES;
    let Tipo                        =   require("./src/arbol/Tipo").Tipo;
    let TIPO_DATO                   =   require("./src/arbol/Tipo").TIPO_DATO;
    let DECLARACION_VARIABLE        =   require("./src/instrucciones/VARIABLES").DECLARACION_VARIABLE; 
    let DECLARACION_VECTOR_TIPO1    =   require("./src/instrucciones/VARIABLES").DECLARACION_VECTOR_TIPO1; 
    let ASIGNACION_VARIABLE         =   require("./src/instrucciones/VARIABLES").ASIGNACION_VARIABLE;
    let ASIGNACION_VECTOR           =   require("./src/instrucciones/VARIABLES").ASIGNACION_VECTOR;
    let VALIDAR_EXISTE_VARIABLE     =   require("./src/instrucciones/VARIABLES").VALIDAR_EXISTE_VARIABLE;
    let VALIDAR_EXISTE_VECTOR       =   require("./src/instrucciones/VARIABLES").VALIDAR_EXISTE_VECTOR;
    let Valor                       =   require("./src/instrucciones/Valor").Valor;
    let OPERACIONES                 =   require("./src/instrucciones/OPERACIONES").OPERACIONES;
    let OPERACION_UNARIA            =   require("./src/instrucciones/OPERACION_UNARIA").OPERACION_UNARIA;
    let IF                          =   require("./src/instrucciones/FUNCIONES").IF;
    let PRINT                       =   require("./src/instrucciones/FUNCIONES").PRINT;
    let WHILE                       =   require("./src/instrucciones/FUNCIONES").WHILE;
    let FOR                         =   require("./src/instrucciones/FUNCIONES").FOR;
    let OPERACION_TERNARIA          =   require("./src/instrucciones/OPERACION_TERNARIA").OPERACION_TERNARIA;
    let CASTEOS                     =   require("./src/instrucciones/CASTEOS").CASTEOS;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 5;
break;
case 2:lexico.push("COMENTARIO SIMPLE: "+yy_.yytext)
break;
case 3:lexico.push("COMENTARIO MULTILINEA: "+yy_.yytext)
break;
case 4:lexico.push("INT");         return 43; 
break;
case 5:lexico.push("DOUBLE");      return 46;
break;
case 6:lexico.push("BOOLEAN");     return 44;
break;
case 7:lexico.push("CHAR");        return 62;
break;
case 8:lexico.push("STRING");      return 45;
break;
case 9:lexico.push("TRUE");        return 67;
break;
case 10:lexico.push("FALSE");       return 68;
break;
case 11:lexico.push("IF");          return 34;
break;
case 12:lexico.push("PRINT");       return 39;
break;
case 13:lexico.push("ELSE");        return 37;
break;
case 14:lexico.push("VOID");        return 'RVOID';
break;
case 15:lexico.push("RETURN");      return 'RRETURN';
break;
case 16:lexico.push("SWITCH");      return 'RSWITCH';
break;
case 17:lexico.push("DCASE");       return 'RCASE';
break;
case 18:lexico.push("DEFAULT");     return 'RDEFAULT';
break;
case 19:lexico.push("WHILE");       return 40;
break;
case 20:lexico.push("FOR");         return 41;
break;
case 21:lexico.push("DO");          return 'RDO';
break;
case 22:lexico.push("BREAK");       return 'RBREAK';
break;
case 23:lexico.push("CONTINUE");    return 'RCONTINUE';
break;
case 24:lexico.push("RETURN");      return 'RRETURN';
break;
case 25:lexico.push("RNEW");        return 24;
break;
case 26:lexico.push("TOLOWER");     return 'RTOLOWER';
break;
case 27:lexico.push("TOUPPER");     return 'RTOUPPER';
break;
case 28:lexico.push("LENGHT");      return 'RLENGTH';
break;
case 29:lexico.push("TRUNCATE");    return 'RTRUNCATE';
break;
case 30:lexico.push("ROUND");       return 'RROUND';
break;
case 31:lexico.push("TYPEOF");      return 'RTYPEOF';
break;
case 32:lexico.push("TOSTRING");    return 'RTOSTRING';
break;
case 33:lexico.push("TOCHARARRAY"); return 'RTOCHARARRAY';
break;
case 34:lexico.push("MAIN");        return 'RMAIN';
break;
case 35:yy_.yytext = yy_.yytext.toLowerCase();          return 18;
break;
case 36:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 66;
break;
case 37:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 65
break;
case 38:return 64
break;
case 39:return 63
break;
case 40:return '$'
break;
case 41:return 29;
break;
case 42:return 30;
break;
case 43:return 47;
break;
case 44:return 48;
break;
case 45:return 49;
break;
case 46:return 50;
break;
case 47:return 51;
break;
case 48:return 52;
break;
case 49:return 35;
break;
case 50:return 36;
break;
case 51:return 53;
break;
case 52:return 19;
break;
case 53:return 28;
break;
case 54:return 32;
break;
case 55:return 8;
break;
case 56:return 59;
break;
case 57:return 60;
break;
case 58:return 54;
break;
case 59:return 61;
break;
case 60:return 57;
break;
case 61:return 58;
break;
case 62:return 56;
break;
case 63:return 55;
break;
case 64:return 25;
break;
case 65:return 27;
break;
case 66:return 22;
break;
case 67:return 23;
break;
case 68:return 31;
break;
case 69:return 'SALTO_LINEA';
break;
case 70:return 'COMILLA_SIMPLE';
break;
case 71:return 'BARRA_INVERTIDA';
break;
case 72:return 'COMILLA_DOBLE';
break;
case 73:return 'TABULACION';
break;
case 74:
break;
}
},
rules: [/^(?:\s+)/i,/^(?:$)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:print\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/i,/^(?:\$)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:==)/i,/^(?:=)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?:\\n)/i,/^(?:\\')/i,/^(?:\\\\)/i,/^(?:")/i,/^(?:\\t)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}