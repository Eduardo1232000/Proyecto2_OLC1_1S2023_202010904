/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,20],$V2=[1,36],$V3=[1,29],$V4=[1,27],$V5=[1,28],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,34],$Vb=[1,35],$Vc=[1,37],$Vd=[1,38],$Ve=[1,39],$Vf=[1,40],$Vg=[1,41],$Vh=[1,42],$Vi=[1,43],$Vj=[1,44],$Vk=[2,5,24,30,31,43,44,50,56,58,59,60,62,63,67,70,71,72,73,74,75,76,77,78],$Vl=[1,62],$Vm=[1,63],$Vn=[1,64],$Vo=[1,72],$Vp=[1,89],$Vq=[1,80],$Vr=[1,79],$Vs=[1,81],$Vt=[1,82],$Vu=[1,83],$Vv=[1,84],$Vw=[1,85],$Vx=[1,86],$Vy=[1,87],$Vz=[1,88],$VA=[1,90],$VB=[1,91],$VC=[1,92],$VD=[1,93],$VE=[1,94],$VF=[1,95],$VG=[1,96],$VH=[31,38,46],$VI=[2,30],$VJ=[1,97],$VK=[8,34],$VL=[1,115],$VM=[1,131],$VN=[1,132],$VO=[1,137],$VP=[1,138],$VQ=[1,123],$VR=[1,124],$VS=[1,125],$VT=[1,126],$VU=[1,127],$VV=[1,128],$VW=[1,129],$VX=[1,130],$VY=[1,133],$VZ=[1,134],$V_=[1,135],$V$=[1,136],$V01=[1,139],$V11=[8,34,39,43,45,46,49,54,55,68,79,80,81,82,83,84,85,86,87,88,89,90,99],$V21=[1,167],$V31=[34,49],$V41=[2,5,24,30,31,43,44,50,56,57,58,59,60,62,63,67,70,71,72,73,74,75,76,77,78],$V51=[1,214],$V61=[8,34,39,43,45,46,49,54,55,68,79,80,85,86,87,88,89,90,99],$V71=[8,34,39,43,45,46,49,54,55,68,79,80,81,82,84,85,86,87,88,89,90,99],$V81=[8,34,39,43,45,46,49,54,55,68,85,86,87,88,89,90,99],$V91=[1,263],$Va1=[1,262],$Vb1=[43,67,70],$Vc1=[43,49],$Vd1=[2,73];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"DECLARACION_VARIABLE":7,";":8,"DECLARACION_VECTORES":9,"DECLARACION_LISTAS":10,"DECLARACION_METODO":11,"DECLARACION_FUNCION":12,"LLAMADA_METODOS":13,"ASIGNACION_VARIABLE":14,"ASIGNACION_VECTORES":15,"ASIGNACION_LISTAS":16,"AGREGAR_DATO_LISTAS":17,"FUNCION_IF":18,"FUNCION_PRINT":19,"FUNCION_WHILE":20,"FUNCION_FOR":21,"FUNCION_DO_WHILE":22,"FUNCION_SWITCH":23,"FUNCION_TO_LOWER":24,"FUNCION_MAIN":25,"SENTENCIA_BREAK":26,"SENTENCIA_CONTINUE":27,"SENTENCIA_RETURN":28,"PTCOMA":29,"RMAIN":30,"id":31,"(":32,"PARAMETROS_LLAMADA":33,")":34,"TIPO":35,"=":36,"EXPRESION":37,"[":38,"]":39,"RNEW":40,"{":41,"LISTA_EXPRESIONES":42,"}":43,"RLIST":44,"<":45,">":46,".":47,"RADD":48,",":49,"RVOID":50,"PARAMETROS":51,"INSTRUCCIONES_FUNCION":52,"DECLARACION_VACIA_METODO":53,"++":54,"--":55,"RIF":56,"RELSE":57,"RPRINT":58,"RWHILE":59,"RFOR":60,"DEC_O_ASIG":61,"RDO":62,"RSWITCH":63,"CASES_SWITCH":64,"DEFAULT":65,"CASE_SWITCH":66,"RCASE":67,":":68,"INSTRUCCIONES_SWITCH":69,"RDEFAULT":70,"RBREAK":71,"RCONTINUE":72,"RRETURN":73,"RINT":74,"RBOOLEAN":75,"RSTRING":76,"RDOUBLE":77,"RCHAR":78,"+":79,"-":80,"*":81,"/":82,"^":83,"%":84,"==":85,"!=":86,"<=":87,">=":88,"||":89,"&&":90,"!":91,"RTOLOWER":92,"RTOUPPER":93,"RLENGTH":94,"RTRUNCATE":95,"RROUND":96,"RTYPEOF":97,"RTOSTRING":98,"?":99,"RTOCHARARRAY":100,"ENTERO":101,"DECIMAL":102,"CARACTER":103,"CADENA":104,"RTRUE":105,"RFALSE":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",24:"FUNCION_TO_LOWER",29:"PTCOMA",30:"RMAIN",31:"id",32:"(",34:")",36:"=",38:"[",39:"]",40:"RNEW",41:"{",43:"}",44:"RLIST",45:"<",46:">",47:".",48:"RADD",49:",",50:"RVOID",54:"++",55:"--",56:"RIF",57:"RELSE",58:"RPRINT",59:"RWHILE",60:"RFOR",62:"RDO",63:"RSWITCH",67:"RCASE",68:":",70:"RDEFAULT",71:"RBREAK",72:"RCONTINUE",73:"RRETURN",74:"RINT",75:"RBOOLEAN",76:"RSTRING",77:"RDOUBLE",78:"RCHAR",79:"+",80:"-",81:"*",82:"/",83:"^",84:"%",85:"==",86:"!=",87:"<=",88:">=",89:"||",90:"&&",91:"!",92:"RTOLOWER",93:"RTOUPPER",94:"RLENGTH",95:"RTRUNCATE",96:"RROUND",97:"RTYPEOF",98:"RTOSTRING",99:"?",100:"RTOCHARARRAY",101:"ENTERO",102:"DECIMAL",103:"CARACTER",104:"CADENA",105:"RTRUE",106:"RFALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[25,5],[25,4],[7,4],[7,2],[9,10],[9,8],[10,11],[10,7],[17,6],[42,3],[42,1],[11,6],[11,5],[12,6],[12,5],[51,3],[51,1],[53,2],[13,4],[13,3],[33,3],[33,1],[14,3],[14,2],[14,2],[15,7],[16,9],[52,3],[52,2],[18,5],[18,7],[18,7],[19,4],[20,5],[21,9],[22,6],[61,1],[61,1],[23,7],[23,8],[23,7],[64,2],[64,1],[66,4],[65,3],[69,1],[69,0],[26,2],[27,2],[28,3],[28,2],[35,1],[35,1],[35,1],[35,1],[35,1],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,2],[37,2],[37,2],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,5],[37,4],[37,3],[37,6],[37,4],[37,1],[37,4],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                            
                            console.log("Parse de Jison entrada: OK ");
                            lista_temporal =[]; let raiz = $$[$0-1][0];  lista_temporal.push(raiz)
                            nodo_graf = new NODO_GRAFICAS("PROGRAMA",_$[$0-1].first_line, _$[$0-1].first_column, 'red');     
                            nodo_graf.agregar_hijo($$[$0-1][1]);
                            lista_temporal.push(nodo_graf)
                            lista_temporal.push(reporte_errores);
                            for(let i=0;i< reporte_errores.length;i++){
                                reporte_errores.pop;
                            }
                            reporte_errores = [];
                            this.$ = lista_temporal;
                            return lista_temporal;
                        
break;
case 2:
lista_temporal = $$[$0-1];  lista_temporal_2= lista_temporal[0]; lista_temporal_2.push($$[$0][0]);
                                                    nodo_graf = new NODO_GRAFICAS( "INSTRUCCIONES", _$[$0-1].first_line, _$[$0-1].first_column, "yellow" );
                                                    nodo_prueba= $$[$0-1][1];
                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                    nodo_prueba = new NODO_GRAFICAS( "INSTRUCCION", _$[$0-1].first_line, _$[$0-1].first_column, "yellowgreen" );
                                                    nodo_prueba.agregar_hijo($$[$0][1]);
                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                    lista_temporal = []; lista_temporal.push(lista_temporal_2); lista_temporal.push(nodo_graf); this.$ = lista_temporal;     
break;
case 3:
   let lstsent = [];        lstsent.push($$[$0][0]);   
                                nodo_graf = new NODO_GRAFICAS( "INSTRUCCIONES", _$[$0].first_line, _$[$0].first_column, "yellow" );
                                nodo_prueba = new NODO_GRAFICAS( "INSTRUCCION", _$[$0].first_line, _$[$0].first_column, "yellowgreen" );
                                nodo_prueba.agregar_hijo($$[$0][1]);
                                nodo_graf.agregar_hijo(nodo_prueba);
                                lista_temporal = []; lista_temporal.push(lstsent); lista_temporal.push(nodo_graf);  this.$ = lista_temporal;      
break;
case 4:
 lista_temporal2= $$[$0-1][0];lista_temporal=[]; lista_temporal.push(lista_temporal2); nodo_graf = $$[$0-1][1]; lista_temporal.push(nodo_graf); this.$ = lista_temporal; 
break;
case 5: case 6: case 10: case 13: case 15: case 18: case 20: case 21:
 lista_temporal=[]; lista_temporal.push($$[$0-1][0]); nodo_graf = $$[$0-1][1]; lista_temporal.push(nodo_graf); this.$ = lista_temporal; 
break;
case 7: case 8: case 9: case 11: case 12: case 14: case 16: case 17: case 19: case 22: case 23: case 24:
 lista_temporal=[]; lista_temporal.push($$[$0][0]); nodo_graf = $$[$0][1]; lista_temporal.push(nodo_graf); this.$ = lista_temporal; 
break;
case 25:
console.error('ERROR SINTACTICO: '+ yytext+' , '+this._$.first_line+' , '+this._$.first_column);
                                                            
break;
case 26:
console.error('ERROR SINTACTICO: '+ yytext+' , '+this._$.first_line+' , '+this._$.first_column);
                                                            val = new NODO_REPORTE_ERROR("Sintactico","No se esperaba \""+yytext+"\" .", this._$.first_line,this._$.first_column); reporte_errores.push(val);
break;
case 27:
lista_temporal = []; val = new LLAMADA_MAIN($$[$0-3],$$[$0-1][0], _$[$0-4].first_line, _$[$0-4].first_column);lista_temporal.push(val);
                                                                        nodo_graf = new NODO_GRAFICAS( "MAIN", _$[$0-4].first_line, _$[$0-4].first_column, "gray" );
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA:MAIN", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                        nodo_prueba=new NODO_GRAFICAS( "ID", _$[$0-4].first_line, _$[$0-4].first_column, "gray" );
                                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column, "black" ))
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                        nodo_prueba=$$[$0-1][1];
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                        
break;
case 28:
lista_temporal = []; val = new LLAMADA_MAIN($$[$0-2],[], _$[$0-3].first_line, _$[$0-3].first_column);lista_temporal.push(val);
                                                                        nodo_graf = new NODO_GRAFICAS( "MAIN", _$[$0-3].first_line, _$[$0-3].first_column, "gray" );
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA:MAIN", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                                        nodo_prueba=new NODO_GRAFICAS( "ID", _$[$0-3].first_line, _$[$0-3].first_column, "gray" );
                                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                        
break;
case 29:
val = new DECLARACION_VARIABLE($$[$0-3][0], $$[$0-2], $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column);
                                                        nodo_graf = new NODO_GRAFICAS( "DECLARACION_VARIABLE", _$[$0-3].first_line, _$[$0-3].first_column, "skyblue" );
                                                        nodo_graf.agregar_hijo($$[$0-3][1]);    //TIPO
                                                        nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-3].first_line, _$[$0-3].first_column, "skyblue" );//ID
                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        nodo_prueba = new NODO_GRAFICAS( "=", _$[$0-3].first_line, _$[$0-3].first_column, "black" );//=
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        nodo_graf.agregar_hijo($$[$0][1]);//VALOR
                                                        nodo_prueba = new NODO_GRAFICAS( ";", _$[$0-3].first_line, _$[$0-3].first_column, "black" );//;
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        lista_temporal=[];lista_temporal.push(val);lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                
break;
case 30:
lista_temporal = []; val = new DECLARACION_VARIABLE($$[$0-1][0], $$[$0], undefined, _$[$0].first_line, _$[$0].first_column); lista_temporal.push(val);
                                                nodo_graf = new NODO_GRAFICAS( "DECLARACION_VARIABLE", _$[$0-1].first_line, _$[$0-1].first_column, "skyblue" );
                                                nodo_graf.agregar_hijo($$[$0-1][1]);    //TIPO
                                                nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-1].first_line, _$[$0-1].first_column, "skyblue" );//ID
                                                nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0], _$[$0-1].first_line, _$[$0-1].first_column, "black" ))
                                                nodo_graf.agregar_hijo(nodo_prueba);
                                                nodo_prueba = new NODO_GRAFICAS( ";", _$[$0-1].first_line, _$[$0-1].first_column, "black" );//;
                                                nodo_graf.agregar_hijo(nodo_prueba);
                                                lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                
break;
case 31:
val = new DECLARACION_VECTOR_TIPO1($$[$0-9][0], $$[$0-6], [],$$[$0-1][0],_$[$0-6].first_line,_$[$0-6].first_column );
                                                                                nodo_graf = new NODO_GRAFICAS( "DECLARACION VECTOR", _$[$0-9].first_line, _$[$0-9].first_column, "skyblue" );
                                                                                nodo_graf.agregar_hijo($$[$0-9][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "[", _$[$0-9].first_line, _$[$0-9].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "]", _$[$0-9].first_line, _$[$0-9].first_column, "black" ));
                                                                                nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-9].first_line, _$[$0-9].first_column, "skyblue" );
                                                                                nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-6], _$[$0-9].first_line, _$[$0-9].first_column, "black" ))//id
                                                                                nodo_graf.agregar_hijo(nodo_prueba);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "=", _$[$0-9].first_line, _$[$0-9].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: NEW", _$[$0-9].first_line, _$[$0-9].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo($$[$0-3][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "[", _$[$0-9].first_line, _$[$0-9].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo($$[$0-1][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "]", _$[$0-9].first_line, _$[$0-9].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-9].first_line, _$[$0-9].first_column, "black" ));
                                                                                lista_temporal = []; lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                
break;
case 32:
 lista_temporal_2 =$$[$0-1][0]; 
                                                                                val = new DECLARACION_VECTOR_TIPO1($$[$0-7][0], $$[$0-4], lista_temporal_2,0,_$[$0-4].first_line,_$[$0-4].first_column );
                                                                                nodo_graf = new NODO_GRAFICAS( "DECLARACION VECTOR", _$[$0-7].first_line, _$[$0-7].first_column, "skyblue" );
                                                                                nodo_graf.agregar_hijo($$[$0-7][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "[", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "]", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-7].first_line, _$[$0-7].first_column, "skyblue" );
                                                                                nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-4], _$[$0-7].first_line, _$[$0-7].first_column, "black" ))//id
                                                                                nodo_graf.agregar_hijo(nodo_prueba);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "=", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                
                                                                                nodo_graf.agregar_hijo($$[$0-1][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                lista_temporal = []; lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$ = lista_temporal
                                                                                
break;
case 33:
lista_temporal = [];val = new DECLARACION_LISTA_TIPO1($$[$0-8][0], $$[$0-6],[], $$[$0-1][0],_$[$0-6].first_line,_$[$0-6].first_column ); lista_temporal.push(val);
                                                                        nodo_graf = new NODO_GRAFICAS( "DECLARACION LISTA", _$[$0-10].first_line, _$[$0-10].first_column, "skyblue" );
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: LIST", _$[$0-10].first_line, _$[$0-10].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "<", _$[$0-10].first_line, _$[$0-10].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo($$[$0-8][1]);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ">", _$[$0-10].first_line, _$[$0-10].first_column, "black" ));
                                                                        nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-10].first_line, _$[$0-10].first_column, "skyblue" );
                                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-6], _$[$0-10].first_line, _$[$0-10].first_column, "black" ))//id
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "=", _$[$0-10].first_line, _$[$0-10].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: NEW", _$[$0-10].first_line, _$[$0-10].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: LIST", _$[$0-10].first_line, _$[$0-10].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "<", _$[$0-10].first_line, _$[$0-10].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo($$[$0-1][1]);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ">", _$[$0-10].first_line, _$[$0-10].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-10].first_line, _$[$0-10].first_column, "black" ));
                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                        
break;
case 34:
lista_temporal = [];lista_temporal_2=[]; lista_temporal_2.push($$[$0][0]);
                                                                        val = new DECLARACION_LISTA_TIPO1($$[$0-4][0], $$[$0-2],lista_temporal_2,$$[$0-4][0],_$[$0-2].first_line,_$[$0-2].first_column ); lista_temporal.push(val);
                                                                        nodo_graf = new NODO_GRAFICAS( "DECLARACION LISTA", _$[$0-6].first_line, _$[$0-6].first_column, "white" );
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: LIST", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "<", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo($$[$0-4][1]);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ">", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                        nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-6].first_line, _$[$0-6].first_column, "skyblue" );
                                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column, "black" ))//id
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "=", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo($$[$0][1]);
                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                        
break;
case 35:
lista_temporal = []; val = new AGREGAR_A_LISTA($$[$0-5],$$[$0-1][0], _$[$0-5].first_line, _$[$0-5].first_column); lista_temporal.push(val);
                                                            nodo_graf = new NODO_GRAFICAS( "AGREGAR DATO LISTA", _$[$0-5].first_line, _$[$0-5].first_column, "green" );
                                                            nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-5].first_line, _$[$0-5].first_column, "green" );
                                                            nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column, "black" ))//id
                                                            nodo_graf.agregar_hijo(nodo_prueba);
                                                            nodo_graf.agregar_hijo(new NODO_GRAFICAS( ".", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                            nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: ADD", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                            nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                            nodo_graf.agregar_hijo($$[$0-1][1]);
                                                            nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                            nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                            lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                            
break;
case 36:
 lista_temporal = $$[$0-2]; lista_temporal_2 = lista_temporal[0]; lista_temporal_2.push($$[$0][0]);
                                                                nodo_graf = new NODO_GRAFICAS( "LISTA DE EXPRESIONES", _$[$0-2].first_line, _$[$0-2].first_column, "skyblue" );
                                                                nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( ",", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                                nodo_graf.agregar_hijo($$[$0][1]);
                                                                lista_temporal = []; lista_temporal.push(lista_temporal_2); lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                
break;
case 37:
   let lstexp = [];        lstexp.push($$[$0][0]); 
                                                                nodo_graf = new NODO_GRAFICAS( "LISTA DE EXPRESIONES", _$[$0].first_line, _$[$0].first_column, "skyblue" ); 
                                                                nodo_graf.agregar_hijo($$[$0][1]);
                                                                lista_temporal = []; lista_temporal.push(lstexp); lista_temporal.push(nodo_graf);  this.$ = lista_temporal
                                                            
break;
case 38:
 let tipo_void = new Tipo(TIPO_DATO.VOID);
                                                                                    lista_temporal = [];val = new DECLARACION_METODO(tipo_void,$$[$0-4],$$[$0-2][0],$$[$0][0], _$[$0-4].first_line, _$[$0-4].first_column); lista_temporal.push(val);
                                                                                    nodo_graf = new NODO_GRAFICAS( "DECLARACION METODO", _$[$0-5].first_line, _$[$0-5].first_column, "black" );
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: VOID", _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-5].first_line, _$[$0-5].first_column, "skyblue" );
                                                                                    nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    nodo_prueba = $$[$0-2][1];
                                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                    
break;
case 39:
let tipo_void_2 = new Tipo(TIPO_DATO.VOID);
                                                                                    lista_temporal = []; val = new DECLARACION_METODO(tipo_void_2,$$[$0-3],[],$$[$0][0], _$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                                                    nodo_graf = new NODO_GRAFICAS( "DECLARACION METODO", _$[$0-4].first_line, _$[$0-4].first_column, "skyblue" );
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: VOID", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                    nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-4].first_line, _$[$0-4].first_column, "skyblue" );
                                                                                    nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                    
                                                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;

                                                                                    
break;
case 40:
lista_temporal = [];val = new DECLARACION_METODO($$[$0-5][0],$$[$0-4],$$[$0-2][0],$$[$0][0], _$[$0-4].first_line, _$[$0-4].first_column); lista_temporal.push(val);
                                                                                    nodo_graf = new NODO_GRAFICAS( "DECLARACION FUNCION", _$[$0-5].first_line, _$[$0-5].first_column, "skyblue" );
                                                                                    nodo_graf.agregar_hijo($$[$0-5][1]);
                                                                                    nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-5].first_line, _$[$0-5].first_column, "skyblue" );
                                                                                    nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    nodo_prueba = $$[$0-2][1];
                                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                    
break;
case 41:
lista_temporal = []; val = new DECLARACION_METODO($$[$0-4][0],$$[$0-3],[],$$[$0][0], _$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                                                    nodo_graf = new NODO_GRAFICAS( "DECLARACION FUNCION", _$[$0-4].first_line, _$[$0-4].first_column, "skyblue" );
                                                                                    nodo_graf.agregar_hijo($$[$0-4][1]);
                                                                                    nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-4].first_line, _$[$0-4].first_column, "skyblue" );
                                                                                    nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                    
break;
case 42:
lista_temporal = $$[$0-2]; lista_temporal_2 = lista_temporal[0]; lista_temporal_2.push($$[$0][0]);
                                                                            nodo_graf = new NODO_GRAFICAS( "PARAMETRO", _$[$0].first_line, _$[$0].first_column, "black" );
                                                                            nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                            nodo_graf.agregar_hijo(new NODO_GRAFICAS( ",", _$[$0].first_line, _$[$0].first_column, "black" ))
                                                                            nodo_graf.agregar_hijo($$[$0][1]);

                                                                            lista_temporal = []; lista_temporal.push(lista_temporal_2);lista_temporal.push(nodo_graf);this.$ = lista_temporal;
                                                                            
break;
case 43:
 let lstmet = [];        lstmet.push($$[$0][0]);  
                                                                        nodo_graf = new NODO_GRAFICAS( "PARAMETRO", _$[$0].first_line, _$[$0].first_column, "black" ); 
                                                                        nodo_graf.agregar_hijo($$[$0][1]);    
                                                                                                                                               
                                                                        lista_temporal = []; lista_temporal.push(lstmet); lista_temporal.push(nodo_graf);this.$ = lista_temporal;
                                                                        
break;
case 44:
lista_temporal = []; val = new DECLARACION_PARAMETRO($$[$0-1][0], $$[$0], undefined, _$[$0].first_line, _$[$0].first_column);val =val.ejecutar();lista_temporal.push(val);
                                                nodo_graf = new NODO_GRAFICAS( "DECLARACION VARIABLE", _$[$0-1].first_line, _$[$0-1].first_column, "skyblue" );
                                                nodo_graf.agregar_hijo($$[$0-1][1]);
                                                nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-1].first_line, _$[$0-1].first_column, "skyblue" );
                                                nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0], _$[$0-1].first_line, _$[$0-1].first_column, "black" ))
                                                nodo_graf.agregar_hijo(nodo_prueba);
                                                lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                 
break;
case 45:
lista_temporal = []; val = new LLAMADA_METODO($$[$0-3],$$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column);lista_temporal.push(val);
                                                                        nodo_graf = new NODO_GRAFICAS( "LLAMADA METODO O FUNCION", _$[$0-3].first_line, _$[$0-3].first_column, "purple" );
                                                                        nodo_prueba=new NODO_GRAFICAS( "ID", _$[$0-3].first_line, _$[$0-3].first_column, "purple" );
                                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                                        nodo_prueba = $$[$0-1][1];
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                        
break;
case 46:
lista_temporal = []; val = new LLAMADA_METODO($$[$0-2],[], _$[$0-2].first_line, _$[$0-2].first_column);lista_temporal.push(val);
                                                                        nodo_graf = new NODO_GRAFICAS( "LLAMADA METODO O FUNCION", _$[$0-2].first_line, _$[$0-2].first_column, "purple" );
                                                                        nodo_prueba=new NODO_GRAFICAS( "ID", _$[$0-2].first_line, _$[$0-2].first_column, "purple" );
                                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, "black" ))
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                        
break;
case 47:
lista_temporal = $$[$0-2]; lista_temporal_2 = lista_temporal[0]; lista_temporal_2.push($$[$0][0]);lista_temporal.push(lista_temporal_2);
                                                                    nodo_graf = new NODO_GRAFICAS( "PARAMETROS.", _$[$0-2].first_line, _$[$0-2].first_column, "gray" );
                                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ",", _$[$0-2].first_line, _$[$0-2].first_column, "gray" ));
                                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                                    lista_temporal[1]= nodo_graf; this.$ = lista_temporal;
                                                                    
break;
case 48:
lista_temporal=[];let lstexp_llam = [];        lstexp_llam.push($$[$0][0]); lista_temporal.push(lstexp_llam);
                                                                   nodo_graf = new NODO_GRAFICAS( "PARAMETROS", _$[$0].first_line, _$[$0].first_column, "gray" );
                                                                   nodo_graf.agregar_hijo( $$[$0][1]); 
                                                                   lista_temporal.push(nodo_graf);this.$ = lista_temporal;
                                                                   
break;
case 49:
 lista_temporal = []; val = new ASIGNACION_VARIABLE($$[$0-2], $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column); lista_temporal.push(val);
                                                    nodo_graf = new NODO_GRAFICAS( "ASIGNACION VARIABLE", _$[$0-2].first_line, _$[$0-2].first_column, "green" );
                                                    nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-2].first_line, _$[$0-2].first_column, "green" );//ID
                                                    nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                    nodo_prueba = new NODO_GRAFICAS( "=", _$[$0-2].first_line, _$[$0-2].first_column, "black" );//=
                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                    nodo_graf.agregar_hijo($$[$0][1]);//VALOR
                                                    nodo_prueba = new NODO_GRAFICAS( ";", _$[$0-2].first_line, _$[$0-2].first_column, "black" );//;
                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                    
break;
case 50:
lista_temporal = []; val = new VALIDAR_EXISTE_VARIABLE($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
                                                        val = new OPERACION_UNARIA($$[$0], val, _$[$0].first_line, _$[$0].first_column);
                                                        val = new ASIGNACION_VARIABLE($$[$0-1],val, _$[$0-1].first_line, _$[$0-1].first_column); lista_temporal.push(val);
                                                        nodo_graf = new NODO_GRAFICAS( "ASIGNACION VARIABLE", _$[$0-1].first_line, _$[$0-1].first_column, "green" );
                                                        nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-1].first_line, _$[$0-1].first_column, "green" );//ID
                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( "++", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                                        nodo_prueba = new NODO_GRAFICAS( ";", _$[$0-1].first_line, _$[$0-1].first_column, "black" );//;
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                       
break;
case 51:
 lista_temporal = []; val = new VALIDAR_EXISTE_VARIABLE($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
                                                        val = new OPERACION_UNARIA($$[$0], val, _$[$0].first_line, _$[$0].first_column);
                                                        val = new ASIGNACION_VARIABLE($$[$0-1],val, _$[$0-1].first_line, _$[$0-1].first_column); lista_temporal.push(val);
                                                        nodo_graf = new NODO_GRAFICAS( "ASIGNACION VARIABLE", _$[$0-1].first_line, _$[$0-1].first_column, "green" );
                                                        nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-1].first_line, _$[$0-1].first_column, "green" );//ID
                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( "++", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                                        nodo_prueba = new NODO_GRAFICAS( ";", _$[$0-1].first_line, _$[$0-1].first_column, "black" );//;
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                       
break;
case 52:
lista_temporal = []; val = new ASIGNACION_VECTOR($$[$0-6], $$[$0-4][0], $$[$0-1][0], _$[$0-6].first_line, _$[$0-6].first_column); lista_temporal.push(val);
                                                                    nodo_graf = new NODO_GRAFICAS( "ASIGNACION VECTOR", _$[$0-6].first_line, _$[$0-6].first_column, "green" );
                                                                    nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-6].first_line, _$[$0-6].first_column, "green" );//ID
                                                                    nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-6], _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "[", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                    nodo_graf.agregar_hijo($$[$0-4][1]);
                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "]", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "=", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                    nodo_graf.agregar_hijo($$[$0-1][1]);
                                                                    nodo_prueba = new NODO_GRAFICAS( ";", _$[$0-6].first_line, _$[$0-6].first_column, "black" );//;
                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                    
break;
case 53:
lista_temporal = []; val = new ASIGNACION_LISTA($$[$0-8], $$[$0-5][0], $$[$0-1][0], _$[$0-8].first_line, _$[$0-8].first_column); lista_temporal.push(val);
                                                                    nodo_graf = new NODO_GRAFICAS( "ASIGNACION LISTA", _$[$0-8].first_line, _$[$0-8].first_column, "green" );
                                                                    nodo_prueba = new NODO_GRAFICAS( "ID", _$[$0-8].first_line, _$[$0-8].first_column, "skyblue" );//ID
                                                                    nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-8], _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "[", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "[", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                    nodo_graf.agregar_hijo($$[$0-5][1]);
                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "]", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "]", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "=", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                    nodo_graf.agregar_hijo($$[$0-1][1]);
                                                                    nodo_prueba = new NODO_GRAFICAS( ";", _$[$0-8].first_line, _$[$0-8].first_column, "black" );//;
                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                    
break;
case 54:
val = $$[$0-1][0]; lista_temporal = []; lista_temporal.push(val); 
                                                nodo_graf = $$[$0-1][1]
                                                lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                
break;
case 55:
val = []; lista_temporal = []; lista_temporal.push(val)
                                    nodo_graf = new NODO_GRAFICAS( "INSTRUCCIONES ", _$[$0-1].first_line, _$[$0-1].first_column, "yellow" );
                                    lista_temporal.push(nodo_graf); this.$= lista_temporal;
                                    
break;
case 56:
lista_temporal = []; val = new IF($$[$0-2][0], $$[$0][0], [], _$[$0-4].first_line, _$[$0-4].first_column); lista_temporal.push(val);
                                                                                                    nodo_graf = new NODO_GRAFICAS( "FUNCION IF", _$[$0-4].first_line, _$[$0-4].first_column, "orange" );
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: IF", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                                    lista_temporal.push(nodo_graf);this.$ = lista_temporal;
                                                                                                    
break;
case 57:
lista_temporal = []; val = new IF($$[$0-4][0], $$[$0-2][0], $$[$0][0], _$[$0-6].first_line, _$[$0-6].first_column); lista_temporal.push(val);
                                                                                                    nodo_graf = new NODO_GRAFICAS( "FUNCION IF", _$[$0-6].first_line, _$[$0-6].first_column, "orange" );
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: IF", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo($$[$0-4][1]);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_prueba = new NODO_GRAFICAS( "PALABRA RESERVADA: ELSE", _$[$0-6].first_line, _$[$0-6].first_column, "black" );
                                                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    
                                                                                                    lista_temporal.push(nodo_graf);this.$ = lista_temporal;
                                                                                                    
break;
case 58:
lista_temporal = []; let funcion_else_if = []; funcion_else_if.push($$[$0][0]); 
                                                                                                     val = new IF($$[$0-4][0], $$[$0-2][0], funcion_else_if, _$[$0-6].first_line, _$[$0-6].first_column); lista_temporal.push(val);
                                                                                                    nodo_graf = new NODO_GRAFICAS( "FUNCION IF", _$[$0-6].first_line, _$[$0-6].first_column, "orange" );
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: IF", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo($$[$0-4][1]);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                                    nodo_prueba = new NODO_GRAFICAS( "PALABRA RESERVADA: ELSE", _$[$0-6].first_line, _$[$0-6].first_column, "black" );
                                                                                                    nodo_prueba.agregar_hijo($$[$0][1]);
                                                                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                                                                    lista_temporal.push(nodo_graf);this.$ = lista_temporal;
                                                                                                    
break;
case 59:
lista_temporal = []; val = new PRINT($$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                        nodo_graf = new NODO_GRAFICAS( "FUNCION PRINT", _$[$0-3].first_line, _$[$0-3].first_column, "orange" );
                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: PRINT", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                        nodo_graf.agregar_hijo($$[$0-1][1]);
                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                        
break;
case 60:
lista_temporal = []; val = new WHILE($$[$0-2][0],$$[$0][0], _$[$0-4].first_line, _$[$0-4].first_column); lista_temporal.push(val);
                                                                                nodo_graf = new NODO_GRAFICAS( "FUNCION WHILE", _$[$0-4].first_line, _$[$0-4].first_column, "orange" );
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: WHILE", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo($$[$0][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                                                lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                
break;
case 61:
lista_temporal = []; val = new FOR($$[$0-6][0],$$[$0-4][0],$$[$0-2][0],$$[$0][0], _$[$0-8].first_line, _$[$0-8].first_column); lista_temporal.push(val);
                                                                                                                    nodo_graf = new NODO_GRAFICAS( "FUNCION FOR", _$[$0-8].first_line, _$[$0-8].first_column, "orange" );
                                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: FOR", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                                                                    nodo_graf.agregar_hijo($$[$0-6][1]);
                                                                                                                    //nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                                                                    nodo_graf.agregar_hijo($$[$0-4][1]);
                                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                                                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-8].first_line, _$[$0-8].first_column, "black" ));
                                                                                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                                                    
break;
case 62:
lista_temporal = [];val = new DO_WHILE($$[$0-1][0],$$[$0-4][0], _$[$0-5].first_line, _$[$0-5].first_column);lista_temporal.push(val);
                                                                                
                                                                                nodo_graf = new NODO_GRAFICAS( "FUNCION DO WHILE", _$[$0-5].first_line, _$[$0-5].first_column, "orange" );
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: DO", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo($$[$0-4][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: WHILE", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                                                nodo_graf.agregar_hijo($$[$0-1][1]);
                                                                                nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                                                lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                
break;
case 63:
lista_temporal = [];val = $$[$0][0];lista_temporal.push(val); nodo_graf = $$[$0][1]; lista_temporal.push(nodo_graf); this.$ =lista_temporal;
break;
case 64:
lista_temporal = [];val = $$[$0][0];lista_temporal.push(val); nodo_graf = $$[$0][1]; lista_temporal.push(nodo_graf);this.$ =lista_temporal;
break;
case 65:
lista_temporal = []; val = new SWITCH($$[$0-4][0],$$[$0-1][0],[],_$[$0-6].first_line, _$[$0-6].first_column); lista_temporal.push(val);
                                                                                        nodo_graf = new NODO_GRAFICAS( "FUNCION SWITCH", _$[$0-6].first_line, _$[$0-6].first_column, "orange" );
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: SWITCH", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                        nodo_graf.agregar_hijo( $$[$0-4][1]);
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                        nodo_graf.agregar_hijo($$[$0-1][1]);
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-6].first_line, _$[$0-6].first_column, "blue" ));
                                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                        
break;
case 66:
lista_temporal = []; val = new SWITCH($$[$0-5][0],$$[$0-2][0],$$[$0-1][0],_$[$0-7].first_line, _$[$0-7].first_column); lista_temporal.push(val);
                                                                                        nodo_graf = new NODO_GRAFICAS( "FUNCION SWITCH", _$[$0-7].first_line, _$[$0-7].first_column, "orange" );
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: SWITCH", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                        nodo_graf.agregar_hijo( $$[$0-5][1]);
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                        lista_temporal_3 = $$[$0-2][1];
                                                                                        nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                                        nodo_graf.agregar_hijo($$[$0-1][1]);
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-7].first_line, _$[$0-7].first_column, "black" ));
                                                                                        
                                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                        
break;
case 67:
lista_temporal=[]; val = new SWITCH($$[$0-4][0],[],$$[$0-1][0],_$[$0-6].first_line, _$[$0-6].first_column); lista_temporal.push(val);
                                                                                        nodo_graf = new NODO_GRAFICAS( "FUNCION SWITCH", _$[$0-6].first_line, _$[$0-6].first_column, "orange" );
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: SWITCH", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                        nodo_graf.agregar_hijo( $$[$0-4][1]);
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "{", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                        nodo_graf.agregar_hijo($$[$0-1][1]);
                                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "}", _$[$0-6].first_line, _$[$0-6].first_column, "black" ));
                                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                                        
break;
case 68:
lista_temporal = $$[$0-1]; lista_temporal_2 = lista_temporal[0]; lista_temporal_2.push($$[$0][0]); 
                                        nodo_graf = new NODO_GRAFICAS( "CASES SWITCH", _$[$0-1].first_line, _$[$0-1].first_column, "orange" );
                                        nodo_graf.agregar_hijo($$[$0-1][1]);
                                        nodo_graf.agregar_hijo($$[$0][1]);
                                        lista_temporal = [];lista_temporal.push(lista_temporal_2); lista_temporal.push(nodo_graf);  this.$ = lista_temporal;
                                        
break;
case 69:
lista_temporal = [];let lstswitch = [];        lstswitch.push($$[$0][0]);       lista_temporal.push(lstswitch);
                                        nodo_graf = new NODO_GRAFICAS( "CASES SWITCH", _$[$0].first_line, _$[$0].first_column, "orange" );
                                        nodo_graf.agregar_hijo($$[$0][1]);
                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                        
break;
case 70:
lista_temporal = []; val = new CASE($$[$0-2][0],$$[$0][0], _$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                        nodo_graf = new NODO_GRAFICAS( "CASE", _$[$0-3].first_line, _$[$0-3].first_column, "orange" );
                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: CASE", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                        nodo_graf.agregar_hijo($$[$0-2][1]);
                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ":", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                        nodo_prueba = $$[$0][1];
                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                        
break;
case 71:
lista_temporal = []; val = $$[$0][0]; lista_temporal.push(val);

                                                    nodo_graf = new NODO_GRAFICAS( "DEFAULT", _$[$0-2].first_line, _$[$0-2].first_column, "orange" );
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: DEFAULT", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ":", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_prueba = $$[$0][1];
                                                    nodo_graf.agregar_hijo(nodo_prueba);
                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                    
break;
case 72:
lista_temporal = []; val = $$[$0][0]; lista_temporal.push(val);
                                            lista_temporal_3 = $$[$0][1];
                                            lista_temporal.push(lista_temporal_3); this.$ = lista_temporal;
                                            
break;
case 73:
lista_temporal = []; val = []; lista_temporal.push(val)
                                            lista_temporal_3 = []
                                            lista_temporal.push(lista_temporal_3); this.$ = lista_temporal;
                                            
break;
case 74:
lista_temporal = []; val = new SENT_BREAK(_$[$0-1].first_line, _$[$0-1].first_column);lista_temporal.push(val);
                                            nodo_graf = new NODO_GRAFICAS( "BREAK", _$[$0-1].first_line, _$[$0-1].first_column, "red" );
                                            nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: BREAK", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                            nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                            lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                            
break;
case 75:
lista_temporal = []; val = new SENT_CONTINUE(_$[$0-1].first_line, _$[$0-1].first_column);lista_temporal.push(val);
                                            nodo_graf = new NODO_GRAFICAS( "CONTINUE", _$[$0-1].first_line, _$[$0-1].first_column, "red" );
                                            nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: CONTINUE", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                            nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                            lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                            
break;
case 76:
lista_temporal = []; val = new SENT_RETURN($$[$0-1][0], _$[$0-2].first_line, _$[$0-2].first_column);lista_temporal.push(val);
                                            nodo_graf = new NODO_GRAFICAS( "RETURN", _$[$0-2].first_line, _$[$0-2].first_column, "red" );
                                            nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: RETURN", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                            nodo_graf.agregar_hijo($$[$0-1][1]);   
                                            nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                            lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                            
break;
case 77:
lista_temporal = []; val = new SENT_RETURN("", _$[$0-1].first_line, _$[$0-1].first_column);lista_temporal.push(val);
                                            nodo_graf = new NODO_GRAFICAS( "RETURN", _$[$0-1].first_line, _$[$0-1].first_column, "red" );
                                            nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: RETURN", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                            nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                            lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                            
break;
case 78:
 val = new Tipo(TIPO_DATO.INT);     nodo_graf = new NODO_GRAFICAS( "TIPO", _$[$0].first_line, _$[$0].first_column, "blue" );    nodo_prueba = new NODO_GRAFICAS( "INT", _$[$0].first_line, _$[$0].first_column, "black" );    nodo_graf.agregar_hijo(nodo_prueba);  lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 79:
 val = new Tipo(TIPO_DATO.BOOLEAN); nodo_graf = new NODO_GRAFICAS( "TIPO", _$[$0].first_line, _$[$0].first_column, "blue" );    nodo_prueba = new NODO_GRAFICAS( "BOOLEAN", _$[$0].first_line, _$[$0].first_column, "black" );    nodo_graf.agregar_hijo(nodo_prueba);  lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 80:
 val = new Tipo(TIPO_DATO.STRING);  nodo_graf = new NODO_GRAFICAS( "TIPO", _$[$0].first_line, _$[$0].first_column, "blue" );    nodo_prueba = new NODO_GRAFICAS( "STRING", _$[$0].first_line, _$[$0].first_column, "black" );    nodo_graf.agregar_hijo(nodo_prueba);  lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 81:
 val = new Tipo(TIPO_DATO.DOUBLE);  nodo_graf = new NODO_GRAFICAS( "TIPO", _$[$0].first_line, _$[$0].first_column, "blue" );    nodo_prueba = new NODO_GRAFICAS( "DOUBLE", _$[$0].first_line, _$[$0].first_column, "black" );    nodo_graf.agregar_hijo(nodo_prueba);  lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 82:
 val = new Tipo(TIPO_DATO.CHAR);    nodo_graf = new NODO_GRAFICAS( "TIPO", _$[$0].first_line, _$[$0].first_column, "blue" );    nodo_prueba = new NODO_GRAFICAS( "CHAR", _$[$0].first_line, _$[$0].first_column, "black" );    nodo_graf.agregar_hijo(nodo_prueba);  lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 83:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION ARITMETICA", _$[$0-2].first_line, _$[$0-2].first_column, "blue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);nodo_graf.agregar_hijo(new NODO_GRAFICAS( "+", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 84:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION ARITMETICA", _$[$0-2].first_line, _$[$0-2].first_column, "blue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);nodo_graf.agregar_hijo(new NODO_GRAFICAS( "-", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 85:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION ARITMETICA", _$[$0-2].first_line, _$[$0-2].first_column, "blue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);nodo_graf.agregar_hijo(new NODO_GRAFICAS( "*", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 86:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION ARITMETICA", _$[$0-2].first_line, _$[$0-2].first_column, "blue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);nodo_graf.agregar_hijo(new NODO_GRAFICAS( "/", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 87:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION ARITMETICA", _$[$0-2].first_line, _$[$0-2].first_column, "blue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);nodo_graf.agregar_hijo(new NODO_GRAFICAS( "^", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 88:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION ARITMETICA", _$[$0-2].first_line, _$[$0-2].first_column, "blue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);nodo_graf.agregar_hijo(new NODO_GRAFICAS( "%", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 89:
val = new OPERACION_UNARIA($$[$0-1], $$[$0][0], _$[$0].first_line, _$[$0].first_column);        nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0-1].first_line, _$[$0-1].first_column, "blue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "-", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 90:
val = $$[$0-1][0];                                                                  nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0-2].first_line, _$[$0-2].first_column, "blue" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0-1][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    
break;
case 91:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION RELACIONAL", _$[$0-2].first_line, _$[$0-2].first_column, "orange" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "==", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 92:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION RELACIONAL", _$[$0-2].first_line, _$[$0-2].first_column, "orange" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "!=", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 93:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION RELACIONAL", _$[$0-2].first_line, _$[$0-2].first_column, "orange" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "<", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 94:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION RELACIONAL", _$[$0-2].first_line, _$[$0-2].first_column, "orange" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ">", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 95:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION RELACIONAL", _$[$0-2].first_line, _$[$0-2].first_column, "orange" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "<=", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 96:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION RELACIONAL", _$[$0-2].first_line, _$[$0-2].first_column, "orange" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ">=", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 97:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION LOGICA", _$[$0-2].first_line, _$[$0-2].first_column, "red" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "||", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 98:
val = new OPERACIONES($$[$0-2][0], $$[$0-1], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);      nodo_graf = new NODO_GRAFICAS( "OPERACION LOGICA", _$[$0-2].first_line, _$[$0-2].first_column, "red" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "&&", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 99:
val = new OPERACION_UNARIA($$[$0-1], $$[$0][0], _$[$0].first_line, _$[$0].first_column);        nodo_graf = new NODO_GRAFICAS( "OPERACION LOGICA", _$[$0-1].first_line, _$[$0-1].first_column, "red" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "!", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 100:
lista_temporal = []; val = new OPERACION_UNARIA($$[$0], $$[$0-1][0], _$[$0].first_line, _$[$0].first_column); lista_temporal.push(val);        
                                                    //console.log("si hago la operacion");
                                                    nodo_graf = new NODO_GRAFICAS( "INCREMENTO", _$[$0-1].first_line, _$[$0-1].first_column, "blue" );
                                                    nodo_graf.agregar_hijo($$[$0-1][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "++", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                                    lista_temporal.push(nodo_graf); this.$= lista_temporal;
                                                    
break;
case 101:
lista_temporal = []; val = new OPERACION_UNARIA($$[$0], $$[$0-1][0], _$[$0].first_line, _$[$0].first_column);lista_temporal.push(val);        
                                                    nodo_graf = new NODO_GRAFICAS( "DECREMENTO", _$[$0-1].first_line, _$[$0-1].first_column, "blue" );
                                                    nodo_graf.agregar_hijo($$[$0-1][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "--", _$[$0-1].first_line, _$[$0-1].first_column, "black" ));
                                                    lista_temporal.push(nodo_graf); this.$= lista_temporal;
                                                    
break;
case 102:
lista_temporal = []; val = new TO_LOWER($$[$0-1][0],_$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                    nodo_graf = new NODO_GRAFICAS( "TOLOWER", _$[$0-3].first_line, _$[$0-3].first_column, "blue" );
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: TOLOWER", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo($$[$0-1][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                    
break;
case 103:
lista_temporal = []; val = new TO_UPPER($$[$0-1][0],_$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                    nodo_graf = new NODO_GRAFICAS( "TOUPPER", _$[$0-3].first_line, _$[$0-3].first_column, "blue" );
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: TOUPPER", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo($$[$0-1][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                    
break;
case 104:
lista_temporal = []; val = new LENGHT($$[$0-1][0],_$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                    nodo_graf = new NODO_GRAFICAS( "LENGTH", _$[$0-3].first_line, _$[$0-3].first_column, "blue" );
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: LENGTH", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo($$[$0-1][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                    
break;
case 105:
lista_temporal = []; val = new TRUNCATE($$[$0-1][0],_$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                    nodo_graf = new NODO_GRAFICAS( "TRUNCATE", _$[$0-3].first_line, _$[$0-3].first_column, "blue" );
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: TRUNCATE", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo($$[$0-1][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                    
break;
case 106:
lista_temporal = []; val = new ROUND($$[$0-1][0],_$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                    nodo_graf = new NODO_GRAFICAS( "ROUND", _$[$0-3].first_line, _$[$0-3].first_column, "blue" );
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: ROUND", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo($$[$0-1][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                    
break;
case 107:
lista_temporal = []; val = new TYPEOF($$[$0-1][0],_$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                    nodo_graf = new NODO_GRAFICAS( "TYPEOF", _$[$0-3].first_line, _$[$0-3].first_column, "blue" );
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: TYPEOF", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo($$[$0-1][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                    
break;
case 108:
lista_temporal = []; val = new TOSTRING($$[$0-1][0],_$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                    nodo_graf = new NODO_GRAFICAS( "TOSTRING", _$[$0-3].first_line, _$[$0-3].first_column, "blue" );
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: TOSTRING", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo($$[$0-1][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ";", _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                    
break;
case 109:
val = new CASTEOS("INT", $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column);              nodo_graf = new NODO_GRAFICAS( "CASTEO", _$[$0-3].first_line, _$[$0-3].first_column, "green" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "INT", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 110:
val = new CASTEOS("DOUBLE", $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column);           nodo_graf = new NODO_GRAFICAS( "CASTEO", _$[$0-3].first_line, _$[$0-3].first_column, "green" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "DOUBLE", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 111:
val = new CASTEOS("CHAR", $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column);             nodo_graf = new NODO_GRAFICAS( "CASTEO", _$[$0-3].first_line, _$[$0-3].first_column, "green" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "CHAR", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 112:
val = new CASTEOS("STRING", $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column);           nodo_graf = new NODO_GRAFICAS( "CASTEO", _$[$0-3].first_line, _$[$0-3].first_column, "green" );lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "STRING", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    
break;
case 113:
lista_temporal = []; val = new OPERACION_TERNARIA($$[$0-4][0], $$[$0-2][0], $$[$0][0], _$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                    nodo_graf = new NODO_GRAFICAS( "OPERACION TERNARIA", _$[$0-4].first_line, _$[$0-4].first_column, "blue" );
                                                    nodo_graf.agregar_hijo($$[$0-4][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( "?", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0-2][1]);
                                                    nodo_graf.agregar_hijo(new NODO_GRAFICAS( ":", _$[$0-4].first_line, _$[$0-4].first_column, "black" ));
                                                    nodo_graf.agregar_hijo($$[$0][1]);
                                                    lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                    
break;
case 114:
lista_temporal = []; val = new LLAMADA_METODO_EXP($$[$0-3],$$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column);lista_temporal.push(val);
                                                                        nodo_graf = new NODO_GRAFICAS( "LLAMADA METODO O FUNCION", _$[$0-3].first_line, _$[$0-3].first_column, "purple" );
                                                                        nodo_prueba=new NODO_GRAFICAS( "ID", _$[$0-3].first_line, _$[$0-3].first_column, "black" );
                                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, "black" ))
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                                        nodo_prueba=new NODO_GRAFICAS( "PARAMETROS", _$[$0-3].first_line, _$[$0-3].first_column, "black" );
                                                                        lista_temporal_3 = $$[$0-1][1]; for(let i = 0; i< lista_temporal_3.length;i++){nodo_prueba.agregar_hijo(lista_temporal_3[i]);if(i!=lista_temporal.length){nodo_prueba.agregar_hijo(new NODO_GRAFICAS( ",", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));}}
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                        
break;
case 115:
lista_temporal = []; val = new LLAMADA_METODO_EXP($$[$0-2],[], _$[$0-2].first_line, _$[$0-2].first_column);lista_temporal.push(val);
                                                                        nodo_graf = new NODO_GRAFICAS( "LLAMADA METODO O FUNCION", _$[$0-2].first_line, _$[$0-2].first_column, "purple" );
                                                                        nodo_prueba=new NODO_GRAFICAS( "ID", _$[$0-2].first_line, _$[$0-2].first_column, "black" );
                                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, "black" ))
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-2].first_line, _$[$0-2].first_column, "black" ));
                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                        
break;
case 116:
lista_temporal = []; val = new VALIDAR_EXISTE_LISTA($$[$0-5],$$[$0-2][0],_$[$0-5].first_line, _$[$0-5].first_column);lista_temporal.push(val);
                                                                        nodo_graf = new NODO_GRAFICAS( "ACCESO A LISTAS", _$[$0-5].first_line, _$[$0-5].first_column, "blue" );
                                                                        nodo_prueba=new NODO_GRAFICAS( "ID", _$[$0-5].first_line, _$[$0-5].first_column, "black" );
                                                                        nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column, "black" ))
                                                                        nodo_graf.agregar_hijo(nodo_prueba);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "[", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "[", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo($$[$0-2][1]);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "]", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "]", _$[$0-5].first_line, _$[$0-5].first_column, "black" ));
                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;
                                                                        
break;
case 117:
lista_temporal = []; val = new TOCHARARRAY($$[$0-1][0],_$[$0-3].first_line, _$[$0-3].first_column); lista_temporal.push(val);
                                                                        nodo_graf = new NODO_GRAFICAS( "TOCHARARRAY", _$[$0-3].first_line, _$[$0-3].first_column, "blue" );
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "PALABRA RESERVADA: TOCHARARRAY", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( "(", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                                        nodo_graf.agregar_hijo($$[$0-1][1]);
                                                                        nodo_graf.agregar_hijo(new NODO_GRAFICAS( ")", _$[$0-3].first_line, _$[$0-3].first_column, "black" ));
                                                                        lista_temporal.push(nodo_graf); this.$ = lista_temporal;

                                                                        
break;
case 118:
val = new VALIDAR_EXISTE_VARIABLE($$[$0],_$[$0].first_line,_$[$0].first_column);          nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0].first_line, _$[$0].first_column, "blue" );     nodo_prueba = new NODO_GRAFICAS( "VARIABLE", _$[$0].first_line, _$[$0].first_column, "skyblue" );nodo_prueba.agregar_hijo(new NODO_GRAFICAS( $$[$0], _$[$0].first_line, _$[$0].first_column, "black" )); nodo_graf.agregar_hijo(nodo_prueba);lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 119:
val = new VALIDAR_EXISTE_VECTOR($$[$0-3],$$[$0-1][0],_$[$0-3].first_line,_$[$0-3].first_column);      nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0-3].first_line, _$[$0-3].first_column, "blue" );     nodo_graf.agregar_hijo(new NODO_GRAFICAS( $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, "black" ));lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 120:
val = new Valor($$[$0],"INT",_$[$0].first_line,_$[$0].first_column);                      nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0].first_line, _$[$0].first_column, "blue" );     nodo_graf.agregar_hijo(new NODO_GRAFICAS( $$[$0], _$[$0].first_line, _$[$0].first_column, "black" ));lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 121:
val = new Valor($$[$0],"DOUBLE",_$[$0].first_line,_$[$0].first_column);                   nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0].first_line, _$[$0].first_column, "blue" );     nodo_graf.agregar_hijo(new NODO_GRAFICAS( $$[$0], _$[$0].first_line, _$[$0].first_column, "black" ));lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 122:
val = new Valor($$[$0],"CHAR",_$[$0].first_line,_$[$0].first_column);                     nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0].first_line, _$[$0].first_column, "blue" );     nodo_graf.agregar_hijo(new NODO_GRAFICAS( $$[$0], _$[$0].first_line, _$[$0].first_column, "black" ));lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 123:
val = new Valor($$[$0],"STRING",_$[$0].first_line,_$[$0].first_column);                   nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0].first_line, _$[$0].first_column, "blue" );     nodo_graf.agregar_hijo(new NODO_GRAFICAS( $$[$0], _$[$0].first_line, _$[$0].first_column, "black" ));lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
case 124:
val = new Valor($$[$0],"true",_$[$0].first_line,_$[$0].first_column);                     nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0].first_line, _$[$0].first_column, "blue" );     nodo_graf.agregar_hijo(new NODO_GRAFICAS( "TRUE", _$[$0].first_line, _$[$0].first_column, "black" ));lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal   
break;
case 125:
val = new Valor($$[$0],"false",_$[$0].first_line,_$[$0].first_column);                    nodo_graf = new NODO_GRAFICAS( "EXPRESION", _$[$0].first_line, _$[$0].first_column, "blue" );     nodo_graf.agregar_hijo(new NODO_GRAFICAS( "FALSE", _$[$0].first_line, _$[$0].first_column, "black" )); lista_temporal = [];lista_temporal.push(val); lista_temporal.push(nodo_graf); this.$= lista_temporal
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,25:21,26:22,27:23,28:24,30:$V2,31:$V3,35:26,44:$V4,50:$V5,56:$V6,58:$V7,59:$V8,60:$V9,62:$Va,63:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj},{1:[3]},{2:$V0,5:[1,45],6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,25:21,26:22,27:23,28:24,30:$V2,31:$V3,35:26,44:$V4,50:$V5,56:$V6,58:$V7,59:$V8,60:$V9,62:$Va,63:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj},o($Vk,[2,3]),{8:[1,47]},{8:[1,48]},{8:[1,49]},o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),{8:[1,50]},o($Vk,[2,11]),o($Vk,[2,12]),{8:[1,51]},o($Vk,[2,14]),{8:[1,52]},o($Vk,[2,16]),o($Vk,[2,17]),{8:[1,53]},o($Vk,[2,19]),{8:[1,54]},{8:[1,55]},o($Vk,[2,22]),o($Vk,[2,23]),o($Vk,[2,24]),o($Vk,[2,26],{29:[1,56]}),{31:[1,57],38:[1,58]},{45:[1,59]},{31:[1,60]},{32:[1,61],36:$Vl,38:[1,65],47:[1,66],54:$Vm,55:$Vn},{32:[1,67]},{32:[1,68]},{32:[1,69]},{32:[1,70]},{41:$Vo,52:71},{32:[1,73]},{31:[1,74]},{8:[1,75]},{8:[1,76]},{8:[1,78],31:$Vp,32:$Vq,37:77,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($VH,[2,78]),o($VH,[2,79]),o($VH,[2,80]),o($VH,[2,81]),o($VH,[2,82]),{1:[2,1]},o($Vk,[2,2]),o($Vk,[2,4]),o($Vk,[2,5]),o($Vk,[2,6]),o($Vk,[2,10]),o($Vk,[2,13]),o($Vk,[2,15]),o($Vk,[2,18]),o($Vk,[2,20]),o($Vk,[2,21]),o($Vk,[2,25]),{8:$VI,32:[1,98],36:$VJ},{39:[1,99]},{35:100,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj},{32:[1,101]},{31:$Vp,32:$Vq,33:102,34:[1,103],37:104,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:105,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($VK,[2,50]),o($VK,[2,51]),{31:$Vp,32:$Vq,37:106,38:[1,107],80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{48:[1,108]},{31:$Vp,32:$Vq,37:109,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:110,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:111,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{7:114,14:113,31:$VL,35:116,61:112,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj},{59:[1,117]},{2:$V0,4:118,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,25:21,26:22,27:23,28:24,30:$V2,31:$V3,35:26,43:[1,119],44:$V4,50:$V5,56:$V6,58:$V7,59:$V8,60:$V9,62:$Va,63:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj},{31:$Vp,32:$Vq,37:120,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{32:[1,121]},o($Vk,[2,74]),o($Vk,[2,75]),{8:[1,122],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},o($Vk,[2,77]),{31:$Vp,32:$Vq,37:140,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:141,74:[1,142],76:[1,145],77:[1,143],78:[1,144],80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:146,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{32:[1,147]},{32:[1,148]},{32:[1,149]},{32:[1,150]},{32:[1,151]},{32:[1,152]},{32:[1,153]},o($V11,[2,118],{32:[1,154],38:[1,155]}),{32:[1,156]},o($V11,[2,120]),o($V11,[2,121]),o($V11,[2,122]),o($V11,[2,123]),o($V11,[2,124]),o($V11,[2,125]),{31:$Vp,32:$Vq,37:157,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{34:[1,159],35:161,51:158,53:160,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj},{31:[1,162]},{46:[1,163]},{34:[1,165],35:161,51:164,53:160,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj},{34:[1,166],49:$V21},o($Vk,[2,46]),o($V31,[2,48],{45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01}),o($VK,[2,49],{45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01}),{39:[1,168],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{31:$Vp,32:$Vq,37:169,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{32:[1,170]},{34:[1,171],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{34:[1,172],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{34:[1,173],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{8:[1,174]},{8:[2,63]},{8:[2,64]},{36:$Vl,54:$Vm,55:$Vn},{31:[1,175]},{32:[1,176]},{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,25:21,26:22,27:23,28:24,30:$V2,31:$V3,35:26,43:[1,177],44:$V4,50:$V5,56:$V6,58:$V7,59:$V8,60:$V9,62:$Va,63:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj},o($V41,[2,55]),{34:[1,178],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{31:$Vp,32:$Vq,33:179,34:[1,180],37:104,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($Vk,[2,76]),{31:$Vp,32:$Vq,37:181,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:182,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:183,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:184,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:185,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:186,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:187,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:188,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:189,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:190,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:191,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:192,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:193,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:194,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($V11,[2,100]),o($V11,[2,101]),{31:$Vp,32:$Vq,37:195,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($V11,[2,89]),{34:[1,196],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{34:[1,197]},{34:[1,198]},{34:[1,199]},{34:[1,200]},o($V11,[2,99]),{31:$Vp,32:$Vq,37:201,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:202,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:203,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:204,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:205,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:206,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:207,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,33:208,34:[1,209],37:104,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:211,38:[1,210],80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:212,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{8:[2,29],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{34:[1,213],49:$V51},{41:$Vo,52:215},o($V31,[2,43]),{31:[1,216]},{36:[1,217]},{31:[1,218]},{34:[1,219],49:$V51},{41:$Vo,52:220},o($Vk,[2,45]),{31:$Vp,32:$Vq,37:221,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{36:[1,222]},{39:[1,223],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{31:$Vp,32:$Vq,37:224,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{41:$Vo,52:225},{8:[2,59]},{41:$Vo,52:226},{31:$Vp,32:$Vq,37:227,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{8:$VI,36:$VJ},{31:$Vp,32:$Vq,37:228,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($V41,[2,54]),{41:[1,229]},{34:[1,230],49:$V21},{8:[2,28]},o($V61,[2,83],{81:$VS,82:$VT,83:$VU,84:$VV}),o($V61,[2,84],{81:$VS,82:$VT,83:$VU,84:$VV}),o($V71,[2,85],{83:$VU}),o($V71,[2,86],{83:$VU}),o($V11,[2,87]),o($V71,[2,88],{83:$VU}),o($V81,[2,91],{79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV}),o($V81,[2,92],{79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV}),o($V81,[2,93],{79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV}),o($V81,[2,94],{79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV}),o($V81,[2,95],{79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV}),o($V81,[2,96],{79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV}),o([8,34,39,43,49,54,55,68,89,99],[2,97],{45:$VM,46:$VN,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,90:$V$}),o([8,34,39,43,49,54,55,68,89,90,99],[2,98],{45:$VM,46:$VN,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ}),{45:$VM,46:$VN,54:$VO,55:$VP,68:[1,231],79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},o($V11,[2,90]),{31:$Vp,32:$Vq,37:232,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:233,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:234,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:235,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{34:[1,236],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{34:[1,237],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{34:[1,238],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{34:[1,239],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{34:[1,240],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{34:[1,241],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{34:[1,242],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{34:[1,243],49:$V21},o($V11,[2,115]),{31:$Vp,32:$Vq,37:244,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{39:[1,245],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{34:[1,246],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{41:$Vo,52:247},{35:161,53:248,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj},o($Vk,[2,41]),o($V31,[2,44]),{40:[1,249],41:[1,250]},{36:[1,251]},{41:$Vo,52:252},o($Vk,[2,39]),o($V31,[2,47],{45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01}),{31:$Vp,32:$Vq,37:253,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{39:[1,254]},{34:[1,255],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},o($Vk,[2,56],{57:[1,256]}),o($Vk,[2,60]),{8:[1,257],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{34:[1,258],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{64:259,65:260,66:261,67:$V91,70:$Va1},{8:[2,27]},{31:$Vp,32:$Vq,37:264,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($V11,[2,109]),o($V11,[2,110]),o($V11,[2,111]),o($V11,[2,112]),o($V11,[2,102]),o($V11,[2,103]),o($V11,[2,104]),o($V11,[2,105]),o($V11,[2,106]),o($V11,[2,107]),o($V11,[2,108]),o($V11,[2,114]),{39:[1,265],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},o($V11,[2,119]),o($V11,[2,117]),o($Vk,[2,40]),o($V31,[2,42]),{35:266,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj},{31:$Vp,32:$Vq,37:268,42:267,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{31:$Vp,32:$Vq,37:270,40:[1,269],80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($Vk,[2,38]),{8:[1,271],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{36:[1,272]},{8:[2,35]},{18:274,41:$Vo,52:273,56:$V6},{14:275,31:$VL},{8:[2,62]},{43:[1,276],65:277,66:278,67:$V91,70:$Va1},{43:[1,279]},o($Vb1,[2,69]),{68:[1,280]},{31:$Vp,32:$Vq,37:281,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o([8,34,39,43,49,68,99],[2,113],{45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$}),{39:[1,282]},{38:[1,283]},{43:[1,284],49:[1,285]},o($Vc1,[2,37],{45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01}),{44:[1,286]},{8:[2,34],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},o($Vk,[2,52]),{31:$Vp,32:$Vq,37:287,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},o($Vk,[2,57]),o($Vk,[2,58]),{34:[1,288]},o($Vk,[2,65]),{43:[1,289]},o($Vb1,[2,68]),o($Vk,[2,67]),{2:$V0,4:291,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,25:21,26:22,27:23,28:24,30:$V2,31:$V3,35:26,43:$Vd1,44:$V4,50:$V5,56:$V6,58:$V7,59:$V8,60:$V9,62:$Va,63:$Vb,69:290,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj},{45:$VM,46:$VN,54:$VO,55:$VP,68:[1,292],79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},o($V11,[2,116]),{31:$Vp,32:$Vq,37:293,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{8:[2,32]},{31:$Vp,32:$Vq,37:294,80:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE,105:$VF,106:$VG},{45:[1,295]},{8:[1,296],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},{41:$Vo,52:297},o($Vk,[2,66]),{43:[2,71]},o($Vb1,[2,72],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:21,26:22,27:23,28:24,35:26,6:46,2:$V0,24:$V1,30:$V2,31:$V3,44:$V4,50:$V5,56:$V6,58:$V7,59:$V8,60:$V9,62:$Va,63:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj}),o($Vb1,$Vd1,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,25:21,26:22,27:23,28:24,35:26,4:291,69:298,2:$V0,24:$V1,30:$V2,31:$V3,44:$V4,50:$V5,56:$V6,58:$V7,59:$V8,60:$V9,62:$Va,63:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj}),{39:[1,299],45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01},o($Vc1,[2,36],{45:$VM,46:$VN,54:$VO,55:$VP,79:$VQ,80:$VR,81:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,99:$V01}),{35:300,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj},o($Vk,[2,53]),o($Vk,[2,61]),o($Vb1,[2,70]),{8:[2,31]},{46:[1,301]},{8:[2,33]}],
defaultActions: {45:[2,1],113:[2,63],114:[2,64],172:[2,59],180:[2,28],230:[2,27],255:[2,35],258:[2,62],284:[2,32],290:[2,71],299:[2,31],301:[2,33]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var lexico=[];
    module.exports.lexico = lexico;

    var reporte_errores =[];
    module.exports.reporte_errores = reporte_errores;

    let lista_temporal = [];
    let lista_temporal_2 = [];
    let lista_temporal_3 = [];
    let nodo_graf;
    let nodo_prueba;
    let val;

    let NODO_GRAFICAS               =   require("./src/arbol/NODO_GRAFICA").NODO_GRAFICA;
    let NODO_REPORTE_ERROR          =   require("./src/arbol/NODO_REPORTE_ERROR").NODO_REPORTE_ERROR;
    let LISTA_EJECUCIONES           =   require("./src/arbol/LISTA_EJECUCIONES").LISTA_EJECUCIONES;
    let Tipo                        =   require("./src/arbol/Tipo").Tipo;
    let TIPO_DATO                   =   require("./src/arbol/Tipo").TIPO_DATO;
    let DECLARACION_VARIABLE        =   require("./src/instrucciones/VARIABLES").DECLARACION_VARIABLE;
    let DECLARACION_PARAMETRO       =   require("./src/instrucciones/VARIABLES").DECLARACION_PARAMETRO;
    let DECLARACION_VECTOR_TIPO1    =   require("./src/instrucciones/VARIABLES").DECLARACION_VECTOR_TIPO1; 
    let DECLARACION_LISTA_TIPO1     =   require("./src/instrucciones/VARIABLES").DECLARACION_LISTA_TIPO1; 
    let ASIGNACION_VARIABLE         =   require("./src/instrucciones/VARIABLES").ASIGNACION_VARIABLE;
    let ASIGNACION_VECTOR           =   require("./src/instrucciones/VARIABLES").ASIGNACION_VECTOR;
    let ASIGNACION_LISTA           =   require("./src/instrucciones/VARIABLES").ASIGNACION_LISTA;
    let AGREGAR_A_LISTA             =   require("./src/instrucciones/VARIABLES").AGREGAR_A_LISTA;
    let VALIDAR_EXISTE_VARIABLE     =   require("./src/instrucciones/VARIABLES").VALIDAR_EXISTE_VARIABLE;
    let VALIDAR_EXISTE_VECTOR       =   require("./src/instrucciones/VARIABLES").VALIDAR_EXISTE_VECTOR;
    let VALIDAR_EXISTE_LISTA        =   require("./src/instrucciones/VARIABLES").VALIDAR_EXISTE_LISTA;
    let Valor                       =   require("./src/instrucciones/Valor").Valor;
    let OPERACIONES                 =   require("./src/instrucciones/OPERACIONES").OPERACIONES;
    let OPERACION_UNARIA            =   require("./src/instrucciones/OPERACION_UNARIA").OPERACION_UNARIA;
    let IF                          =   require("./src/instrucciones/FUNCIONES").IF;
    let PRINT                       =   require("./src/instrucciones/FUNCIONES").PRINT;
    let WHILE                       =   require("./src/instrucciones/FUNCIONES").WHILE;
    let FOR                         =   require("./src/instrucciones/FUNCIONES").FOR;
    let DO_WHILE                    =   require("./src/instrucciones/FUNCIONES").DO_WHILE;
    let SWITCH                      =   require("./src/instrucciones/FUNCIONES").SWITCH;
    let CASE                        =   require("./src/instrucciones/FUNCIONES").CASE;
    let OPERACION_TERNARIA          =   require("./src/instrucciones/OPERACION_TERNARIA").OPERACION_TERNARIA;
    let CASTEOS                     =   require("./src/instrucciones/CASTEOS").CASTEOS;
    let DECLARACION_METODO          =   require("./src/instrucciones/VARIABLES").DECLARACION_METODO;
    let LLAMADA_METODO              =   require("./src/instrucciones/VARIABLES").LLAMADA_METODO;
    let LLAMADA_METODO_EXP          =   require("./src/instrucciones/VARIABLES").LLAMADA_METODO_EXPRESION;
    let LLAMADA_MAIN                =   require("./src/instrucciones/VARIABLES").LLAMADA_MAIN;
    let TO_LOWER                    =   require("./src/instrucciones/FUNCIONES").TO_LOWER;
    let TO_UPPER                    =   require("./src/instrucciones/FUNCIONES").TO_UPPER;
    let LENGHT                      =   require("./src/instrucciones/FUNCIONES").LENGHT;
    let TRUNCATE                    =   require("./src/instrucciones/FUNCIONES").TRUNCATE;
    let ROUND                       =   require("./src/instrucciones/FUNCIONES").ROUND;
    let TYPEOF                      =   require("./src/instrucciones/FUNCIONES").TYPEOF;
    let TOSTRING                    =   require("./src/instrucciones/FUNCIONES").TOSTRING;
    let SENT_BREAK                  =   require("./src/instrucciones/FUNCIONES").BREAK;
    let SENT_CONTINUE               =   require("./src/instrucciones/FUNCIONES").CONTINUE;
    let SENT_RETURN                 =   require("./src/instrucciones/FUNCIONES").RETURN;
    let TOCHARARRAY                 =   require("./src/instrucciones/FUNCIONES").TOCHARARRAY;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 5;
break;
case 2:lexico.push("COMENTARIO SIMPLE: "+yy_.yytext)
break;
case 3:lexico.push("COMENTARIO MULTILINEA: "+yy_.yytext)
break;
case 4:lexico.push("INT");         return 74; 
break;
case 5:lexico.push("DOUBLE");      return 77;
break;
case 6:lexico.push("BOOLEAN");     return 75;
break;
case 7:lexico.push("CHAR");        return 78;
break;
case 8:lexico.push("STRING");      return 76;
break;
case 9:lexico.push("TRUE");        return 105;
break;
case 10:lexico.push("FALSE");       return 106;
break;
case 11:lexico.push("IF");          return 56;
break;
case 12:lexico.push("PRINT");       return 58;
break;
case 13:lexico.push("ELSE");        return 57;
break;
case 14:lexico.push("VOID");        return 50;
break;
case 15:lexico.push("RETURN");      return 73;
break;
case 16:lexico.push("SWITCH");      return 63;
break;
case 17:lexico.push("DCASE");       return 67;
break;
case 18:lexico.push("DEFAULT");     return 70;
break;
case 19:lexico.push("WHILE");       return 59;
break;
case 20:lexico.push("FOR");         return 60;
break;
case 21:lexico.push("DO");          return 62;
break;
case 22:lexico.push("BREAK");       return 71;
break;
case 23:lexico.push("CONTINUE");    return 72;
break;
case 24:lexico.push("RETURN");      return 73;
break;
case 25:lexico.push("RNEW");        return 40;
break;
case 26:lexico.push("LIST");        return 44;
break;
case 27:lexico.push("ADD");         return 48;
break;
case 28:lexico.push("TOLOWER");     return 92;
break;
case 29:lexico.push("TOUPPER");     return 93;
break;
case 30:lexico.push("LENGHT");      return 94;
break;
case 31:lexico.push("TRUNCATE");    return 95;
break;
case 32:lexico.push("ROUND");       return 96;
break;
case 33:lexico.push("TYPEOF");      return 97;
break;
case 34:lexico.push("TOSTRING");    return 98;
break;
case 35:lexico.push("TOCHARARRAY"); return 100;
break;
case 36:lexico.push("MAIN");        return 30;
break;
case 37: yy_.yytext = yy_.yytext.toLowerCase();            return 31;
break;
case 38: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);       return 104;
break;
case 39: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);       return 103; 
break;
case 40: return 102
break;
case 41: return 101 
break;
case 42:return '$'
break;
case 43:return 54;
break;
case 44:return 55;
break;
case 45:return 79;
break;
case 46:return 80;
break;
case 47:return 81;
break;
case 48:return 82;
break;
case 49:return 83;
break;
case 50:return 84;
break;
case 51:return 32;
break;
case 52:return 34;
break;
case 53:return 85;
break;
case 54:return 36;
break;
case 55:return 49;
break;
case 56:return 68;
break;
case 57:return 8;
break;
case 58:return 89;
break;
case 59:return 90;
break;
case 60:return 86;
break;
case 61:return 91;
break;
case 62:return 87;
break;
case 63:return 88;
break;
case 64:return 46;
break;
case 65:return 45;
break;
case 66:return 41;
break;
case 67:return 43;
break;
case 68:return 38;
break;
case 69:return 39;
break;
case 70:return 99;
break;
case 71:return 47;
break;
case 72:return 'SALTO_LINEA';
break;
case 73:return 'COMILLA_SIMPLE';
break;
case 74:return 'BARRA_INVERTIDA';
break;
case 75:return 'COMILLA_DOBLE';
break;
case 76:return 'TABULACION';
break;
case 77:console.log("error lexico en "+yy_.yylloc.first_line+","+yy_.yylloc.first_column);val = new NODO_REPORTE_ERROR("Lexico","El caracter \""+yy_.yytext+"\" no pertenece al lenguaje.", yy_.yylloc.first_line,yy_.yylloc.first_column); reporte_errores.push(val);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:$)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:print\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:'((\\')|(\\")|(\\\\)|(\\n)|(\\t)|[^\\\n\'])?')/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/i,/^(?:\$)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:==)/i,/^(?:=)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:\\n)/i,/^(?:\\')/i,/^(?:\\\\)/i,/^(?:")/i,/^(?:\\t)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}