/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[2,5,16,25,32,37,38,39,40,41],$V9=[16,20],$Va=[1,40],$Vb=[1,38],$Vc=[1,37],$Vd=[1,39],$Ve=[1,41],$Vf=[1,42],$Vg=[1,43],$Vh=[1,44],$Vi=[1,45],$Vj=[1,46],$Vk=[1,70],$Vl=[1,71],$Vm=[1,72],$Vn=[1,56],$Vo=[1,57],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,63],$Vv=[1,64],$Vw=[1,65],$Vx=[1,66],$Vy=[1,67],$Vz=[1,68],$VA=[1,69],$VB=[8,21,25,26,27,28,29,30,34,42,43,44,45,46,47,48,49,50,51,52,53,54,55],$VC=[1,109],$VD=[8,21,25,26,27,28,29,30,34,42,43,48,49,50,51,52,53,54,55],$VE=[8,21,25,26,27,28,29,30,34,42,43,44,45,47,48,49,50,51,52,53,54,55],$VF=[8,21,25,26,27,28,29,30,34,48,49,50,51,52,53,54,55],$VG=[2,5,16,25,32,35,37,38,39,40,41],$VH=[25,26];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"DECLARACION_VARIABLE":7,";":8,"DECLARACION_VECTORES":9,"ASIGNACION_VARIABLE":10,"ASIGNACION_VECTORES":11,"FUNCION_IF":12,"FUNCION_PRINT":13,"PTCOMA":14,"TIPO":15,"id":16,"=":17,"EXPRESION":18,"EXPRESION_IF":19,"[":20,"]":21,"RNEW":22,"{":23,"LISTA_EXPRESIONES":24,"}":25,",":26,"++":27,"--":28,"?":29,":":30,"INSTRUCCIONES_FUNCION":31,"RIF":32,"(":33,")":34,"RELSE":35,"IF":36,"RPRINT":37,"RINT":38,"RBOOLEAN":39,"RSTRING":40,"RDOUBLE":41,"+":42,"-":43,"*":44,"/":45,"^":46,"%":47,"==":48,"!=":49,"<":50,">":51,"<=":52,">=":53,"||":54,"&&":55,"!":56,"RCHAR":57,"ENTERO":58,"DECIMAL":59,"CARACTER":60,"CADENA":61,"RTRUE":62,"RFALSE":63,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",14:"PTCOMA",16:"id",17:"=",20:"[",21:"]",22:"RNEW",23:"{",25:"}",26:",",27:"++",28:"--",29:"?",30:":",32:"RIF",33:"(",34:")",35:"RELSE",36:"IF",37:"RPRINT",38:"RINT",39:"RBOOLEAN",40:"RSTRING",41:"RDOUBLE",42:"+",43:"-",44:"*",45:"/",46:"^",47:"%",48:"==",49:"!=",50:"<",51:">",52:"<=",53:">=",54:"||",55:"&&",56:"!",57:"RCHAR",58:"ENTERO",59:"DECIMAL",60:"CARACTER",61:"CADENA",62:"RTRUE",63:"RFALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[7,4],[7,2],[7,4],[9,10],[9,8],[24,3],[24,1],[10,4],[10,4],[10,3],[10,3],[11,7],[19,5],[31,3],[31,2],[12,5],[12,7],[12,7],[13,4],[15,1],[15,1],[15,1],[15,1],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,2],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,2],[18,2],[18,2],[18,4],[18,4],[18,4],[18,4],[18,1],[18,4],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                            console.log("Parse de Jison entrada: OK ");
                            let raiz = $$[$0-1]
                            this.$ = raiz;
                            return raiz;
                        
break;
case 2:
$$[$0-1].push($$[$0]);  this.$ = $$[$0-1];
break;
case 3:
   let lstsent = [];        lstsent.push($$[$0]);       this.$ = lstsent;
break;
case 4: case 5: case 9:
 this.$ = $$[$0-1]; 
break;
case 6: case 7: case 8:
 this.$ = $$[$0]; 
break;
case 10: case 11:
console.error('Este es un error SINTACTICO');
break;
case 12: case 14:
this.$ = new DECLARACION_VARIABLE($$[$0-3], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 13:
this.$ = new DECLARACION_VARIABLE($$[$0-1], $$[$0], undefined, _$[$0].first_line, _$[$0].first_column); 
break;
case 15:
this.$ = new DECLARACION_VECTOR_TIPO1($$[$0-9], $$[$0-6], [],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column );
break;
case 16:
this.$ = new DECLARACION_VECTOR_TIPO1($$[$0-7], $$[$0-4], $$[$0-1],0,_$[$0-4].first_line,_$[$0-4].first_column );
break;
case 17:
$$[$0-2].push($$[$0]);  this.$ = $$[$0-2];
break;
case 18:
   let lstexp = [];        lstexp.push($$[$0]);       this.$ = lstexp;
break;
case 19: case 20:
 this.$ = new ASIGNACION_VARIABLE($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 21: case 22:
 this.$ = new VALIDAR_EXISTE_VARIABLE($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
                                                   this.$ = new OPERACION_UNARIA($$[$0-1], this.$, _$[$0-1].first_line, _$[$0-1].first_column);
                                                   this.$ = new ASIGNACION_VARIABLE($$[$0-2],this.$, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 23:
 this.$ = new ASIGNACION_VECTOR($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 24:
this.$ = new OPERACION_TERNARIA($$[$0-4], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 25: case 42:
this.$ = $$[$0-1];
break;
case 26:
this.$ = [];
break;
case 27:
this.$ = new IF($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 28:
this.$ = new IF($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 29:
let funcion_else_if = [];
                                                                                    funcion_else_if.push($$[$0]);
                                                                                    this.$ = funcion_else_if;
break;
case 30:
this.$ = new PRINT($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 31:
 this.$ = new Tipo(TIPO_DATO.INT); 
break;
case 32:
 this.$ = new Tipo(TIPO_DATO.BOOLEAN); 
break;
case 33:
 this.$ = new Tipo(TIPO_DATO.STRING);  
break;
case 34:
 this.$ = new Tipo(TIPO_DATO.DOUBLE);  
break;
case 35: case 36: case 37: case 38: case 39: case 40: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50:
this.$ = new OPERACIONES($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 41: case 51:
this.$ = new OPERACION_UNARIA($$[$0-1], $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 52: case 53:
this.$ = new OPERACION_UNARIA($$[$0], $$[$0-1], _$[$0].first_line, _$[$0].first_column);
break;
case 54:
this.$ = new CASTEOS("INT", $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 55:
this.$ = new CASTEOS("DOUBLE", $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 56:
this.$ = new CASTEOS("CHAR", $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 57:
this.$ = new CASTEOS("STRING", $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 58:
this.$ = new VALIDAR_EXISTE_VARIABLE($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 59:
this.$ = new VALIDAR_EXISTE_VECTOR($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 60:
this.$ = new Valor($$[$0],"INT",_$[$0].first_line,_$[$0].first_column);
break;
case 61:
this.$ = new Valor($$[$0],"DOUBLE",_$[$0].first_line,_$[$0].first_column); 
break;
case 62:
this.$ = new Valor($$[$0],"CHAR",_$[$0].first_line,_$[$0].first_column);   
break;
case 63:
this.$ = new Valor($$[$0],"STRING",_$[$0].first_line,_$[$0].first_column); 
break;
case 64:
this.$ = new Valor($$[$0],"true",_$[$0].first_line,_$[$0].first_column);   
break;
case 65:
this.$ = new Valor($$[$0],"false",_$[$0].first_line,_$[$0].first_column);  
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,15:11,16:$V1,32:$V2,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7},{1:[3]},{2:$V0,5:[1,19],6:20,7:4,9:5,10:6,11:7,12:8,13:9,15:11,16:$V1,32:$V2,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7},o($V8,[2,3]),{8:[1,21]},{8:[1,22]},o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),{8:[1,23]},o($V8,[2,11],{14:[1,24]}),{16:[1,25],20:[1,26]},{17:[1,27],20:[1,30],27:[1,28],28:[1,29]},{33:[1,31]},{33:[1,32]},o($V9,[2,31]),o($V9,[2,32]),o($V9,[2,33]),o($V9,[2,34]),{1:[2,1]},o($V8,[2,2]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,9]),o($V8,[2,10]),{8:[2,13],17:[1,33]},{21:[1,34]},{16:$Va,18:35,19:36,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{8:[1,47]},{8:[1,48]},{16:$Va,18:49,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:50,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:51,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:52,19:53,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:[1,54]},{8:[1,55],27:$Vk,28:$Vl,29:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{8:[1,73]},{16:$Va,18:74,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:75,33:$Vb,38:[1,76],40:[1,79],41:[1,77],43:$Vc,56:$Vd,57:[1,78],58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:80,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},o($VB,[2,58],{20:[1,81]}),o($VB,[2,60]),o($VB,[2,61]),o($VB,[2,62]),o($VB,[2,63]),o($VB,[2,64]),o($VB,[2,65]),o($V8,[2,21]),o($V8,[2,22]),{21:[1,82],27:$Vk,28:$Vl,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{27:$Vk,28:$Vl,34:[1,83],42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{27:$Vk,28:$Vl,34:[1,84],42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{8:[2,12],27:$Vk,28:$Vl,29:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{8:[2,14]},{17:[1,85]},o($V8,[2,19]),{16:$Va,18:86,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:87,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:88,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:89,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:90,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:91,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:92,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:93,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:94,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:95,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:96,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:97,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:98,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:99,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},o($VB,[2,52]),o($VB,[2,53]),{16:$Va,18:100,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},o($V8,[2,20]),o($VB,[2,41]),{27:$Vk,28:$Vl,34:[1,101],42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{34:[1,102]},{34:[1,103]},{34:[1,104]},{34:[1,105]},o($VB,[2,51]),{16:$Va,18:106,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{17:[1,107]},{23:$VC,31:108},{8:[2,30]},{22:[1,110],23:[1,111]},o($VD,[2,35],{44:$Vp,45:$Vq,46:$Vr,47:$Vs}),o($VD,[2,36],{44:$Vp,45:$Vq,46:$Vr,47:$Vs}),o($VE,[2,37],{46:$Vr}),o($VE,[2,38],{46:$Vr}),o($VB,[2,39]),o($VE,[2,40],{46:$Vr}),o($VF,[2,43],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs}),o($VF,[2,44],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs}),o($VF,[2,45],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs}),o($VF,[2,46],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs}),o($VF,[2,47],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs}),o($VF,[2,48],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs}),o([8,21,25,26,27,28,29,30,34,54],[2,49],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,55:$VA}),o([8,21,25,26,27,28,29,30,34,54,55],[2,50],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy}),{27:$Vk,28:$Vl,30:[1,112],42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},o($VB,[2,42]),{16:$Va,18:113,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:114,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:115,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:116,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{21:[1,117],27:$Vk,28:$Vl,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{16:$Va,18:118,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},o($V8,[2,27],{35:[1,119]}),{2:$V0,4:120,6:3,7:4,9:5,10:6,11:7,12:8,13:9,15:11,16:$V1,25:[1,121],32:$V2,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7},{15:122,38:$V4,39:$V5,40:$V6,41:$V7},{16:$Va,18:124,24:123,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{16:$Va,18:125,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},o($VB,[2,54]),o($VB,[2,55]),o($VB,[2,56]),o($VB,[2,57]),o($VB,[2,59]),{8:[1,126],27:$Vk,28:$Vl,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{23:$VC,31:127,36:[1,128]},{2:$V0,6:20,7:4,9:5,10:6,11:7,12:8,13:9,15:11,16:$V1,25:[1,129],32:$V2,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7},o($VG,[2,26]),{20:[1,130]},{25:[1,131],26:[1,132]},o($VH,[2,18],{27:$Vk,28:$Vl,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),{8:[2,24],27:$Vk,28:$Vl,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},o($V8,[2,23]),o($V8,[2,28]),o($V8,[2,29]),o($VG,[2,25]),{16:$Va,18:133,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{8:[2,16]},{16:$Va,18:134,33:$Vb,43:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj},{21:[1,135],27:$Vk,28:$Vl,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},o($VH,[2,17],{27:$Vk,28:$Vl,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),{8:[2,15]}],
defaultActions: {19:[2,1],53:[2,14],84:[2,30],131:[2,16],135:[2,15]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var lexico=[];
    module.exports.lexico = lexico;

    let LISTA_EJECUCIONES           =   require("./src/arbol/LISTA_EJECUCIONES").LISTA_EJECUCIONES;
    let Tipo                        =   require("./src/arbol/Tipo").Tipo;
    let TIPO_DATO                   =   require("./src/arbol/Tipo").TIPO_DATO;
    let DECLARACION_VARIABLE        =   require("./src/instrucciones/VARIABLES").DECLARACION_VARIABLE; 
    let DECLARACION_VECTOR_TIPO1    =   require("./src/instrucciones/VARIABLES").DECLARACION_VECTOR_TIPO1; 
    let ASIGNACION_VARIABLE         =   require("./src/instrucciones/VARIABLES").ASIGNACION_VARIABLE;
    let ASIGNACION_VECTOR           =   require("./src/instrucciones/VARIABLES").ASIGNACION_VECTOR;
    let VALIDAR_EXISTE_VARIABLE     =   require("./src/instrucciones/VARIABLES").VALIDAR_EXISTE_VARIABLE;
    let VALIDAR_EXISTE_VECTOR       =   require("./src/instrucciones/VARIABLES").VALIDAR_EXISTE_VECTOR;
    let Valor                       =   require("./src/instrucciones/Valor").Valor;
    let OPERACIONES                 =   require("./src/instrucciones/OPERACIONES").OPERACIONES;
    let OPERACION_UNARIA            =   require("./src/instrucciones/OPERACION_UNARIA").OPERACION_UNARIA;
    let IF                          =   require("./src/instrucciones/FUNCIONES").IF;
    let PRINT                       =   require("./src/instrucciones/FUNCIONES").PRINT;
    let OPERACION_TERNARIA          =   require("./src/instrucciones/OPERACION_TERNARIA").OPERACION_TERNARIA;
    let CASTEOS                     =   require("./src/instrucciones/CASTEOS").CASTEOS;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 5;
break;
case 2:lexico.push("COMENTARIO SIMPLE: "+yy_.yytext)
break;
case 3:lexico.push("COMENTARIO MULTILINEA: "+yy_.yytext)
break;
case 4:lexico.push("INT");         return 38; 
break;
case 5:lexico.push("DOUBLE");      return 41;
break;
case 6:lexico.push("BOOLEAN");     return 39;
break;
case 7:lexico.push("CHAR");        return 57;
break;
case 8:lexico.push("STRING");      return 40;
break;
case 9:lexico.push("TRUE");        return 62;
break;
case 10:lexico.push("FALSE");       return 63;
break;
case 11:lexico.push("IF");          return 32;
break;
case 12:lexico.push("PRINT");       return 37;
break;
case 13:lexico.push("ELSE");        return 35;
break;
case 14:lexico.push("VOID");        return 'RVOID';
break;
case 15:lexico.push("RETURN");      return 'RRETURN';
break;
case 16:lexico.push("SWITCH");      return 'RSWITCH';
break;
case 17:lexico.push("DCASE");       return 'RCASE';
break;
case 18:lexico.push("DEFAULT");     return 'RDEFAULT';
break;
case 19:lexico.push("WHILE");       return 'RWHILE';
break;
case 20:lexico.push("FOR");         return 'RFOR';
break;
case 21:lexico.push("DO");          return 'RDO';
break;
case 22:lexico.push("BREAK");       return 'RBREAK';
break;
case 23:lexico.push("CONTINUE");    return 'RCONTINUE';
break;
case 24:lexico.push("RETURN");      return 'RRETURN';
break;
case 25:lexico.push("RNEW");        return 22;
break;
case 26:lexico.push("TOLOWER");     return 'RTOLOWER';
break;
case 27:lexico.push("TOUPPER");     return 'RTOUPPER';
break;
case 28:lexico.push("LENGHT");      return 'RLENGTH';
break;
case 29:lexico.push("TRUNCATE");    return 'RTRUNCATE';
break;
case 30:lexico.push("ROUND");       return 'RROUND';
break;
case 31:lexico.push("TYPEOF");      return 'RTYPEOF';
break;
case 32:lexico.push("TOSTRING");    return 'RTOSTRING';
break;
case 33:lexico.push("TOCHARARRAY"); return 'RTOCHARARRAY';
break;
case 34:lexico.push("MAIN");        return 'RMAIN';
break;
case 35:yy_.yytext = yy_.yytext.toLowerCase();          return 16;
break;
case 36:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 61;
break;
case 37:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 60
break;
case 38:return 59
break;
case 39:return 58
break;
case 40:return '$'
break;
case 41:return 27;
break;
case 42:return 28;
break;
case 43:return 42;
break;
case 44:return 43;
break;
case 45:return 44;
break;
case 46:return 45;
break;
case 47:return 46;
break;
case 48:return 47;
break;
case 49:return 33;
break;
case 50:return 34;
break;
case 51:return 48;
break;
case 52:return 17;
break;
case 53:return 26;
break;
case 54:return 30;
break;
case 55:return 8;
break;
case 56:return 54;
break;
case 57:return 55;
break;
case 58:return 49;
break;
case 59:return 56;
break;
case 60:return 52;
break;
case 61:return 53;
break;
case 62:return 51;
break;
case 63:return 50;
break;
case 64:return 23;
break;
case 65:return 25;
break;
case 66:return 20;
break;
case 67:return 21;
break;
case 68:return 29;
break;
case 69:return 'SALTO_LINEA';
break;
case 70:return 'COMILLA_SIMPLE';
break;
case 71:return 'BARRA_INVERTIDA';
break;
case 72:return 'COMILLA_DOBLE';
break;
case 73:return 'TABULACION';
break;
case 74:
break;
}
},
rules: [/^(?:\s+)/i,/^(?:$)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:print\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/i,/^(?:\$)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:==)/i,/^(?:=)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?:\\n)/i,/^(?:\\')/i,/^(?:\\\\)/i,/^(?:")/i,/^(?:\\t)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}